#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{wasysym,multicol}
\hypersetup{linkcolor={blue}}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding latin9
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize letterpaper
\use_geometry true
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Maxima (5.22.1) and the Calculus
\end_layout

\begin_layout Author
Leon Q.
 Brin
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
About this document
\end_layout

\begin_layout Standard
This document discusses the use of Maxima (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{http://maxima.sourceforge.net/}
\end_layout

\end_inset

) for solving typical Calculus problems.
 The latest version of this document can be found at 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{http://maxima.sourceforge.net/documentation.html}
\end_layout

\end_inset

.
 This text is licensed under the Creative Commons Attribution-Share Alike
 3.0 United States License.
 See 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{http://creativecommons.org/licenses/by-sa/3.0/us/}
\end_layout

\end_inset

 for details.
 Leon Q.
 Brin is a professor at Southern CT State University, New Haven, CT U.S.A.
 Feedback is welcome at 
\family typewriter

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{mailto:BrinL1@southernct.edu}{BrinL1@southernct.edu}
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
History and Philosophy
\end_layout

\begin_layout Standard
Maxima is an open source computer algebra system
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
computer algebra system|(
\end_layout

\end_inset

 (CAS
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
CAS|see
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

computer algebra system
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

).
 As such it is free for everyone to download, install, and use! In fact,
 its (GNU Public) license, or GPL, allows everyone the freedom to modify
 and distribute it too, as long as its license remains with it unmodified.
 From the Maxima Manual: 
\end_layout

\begin_layout Quote
Maxima is derived from the Macsyma system, developed at MIT in the years
 1968 through 1982 as part of Project MAC.
 MIT turned over a copy of the Macsyma source code to the Department of
 Energy in 1982; that version is now known as DOE Macsyma.
 A copy of DOE Macsyma was maintained by Professor William F.
 Schelter of the University of Texas from 1982 until his death in 2001.
 In 1998, Schelter obtained permission from the Department of Energy to
 release the DOE Macsyma source code under the GNU Public License, and in
 2000 he initiated the Maxima project at SourceForge to maintain and develop
 DOE Macsyma, now called Maxima.
 
\end_layout

\begin_layout Standard
During the early days of development, the only user interface available
 was the command line.
 This option is still the only one guaranteed to work as advertised.
 For simplicity and the greatest compatibility, all examples in this document
 are presented as command line input and output (as would be seen using
 command line Maxima).
 However, several independent projects strive to give Maxima a more modern,
 graphical user interface.
 One of these projects is wxMaxima
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
wxMaxima
\end_layout

\end_inset

, a simple front end that allows modification of previous input and typeset
 output.
 All of the examples in this document were produced using wxMaxima.
 More on that later.
\end_layout

\begin_layout Standard
Any CAS may be thought of as a highly sophisticated calculator.
 It can be used to do any of the types of numerical calculations you might
 expect of a calculator such as trigonometric, exponential, logarithmic,
 and arithemtic computations.
 However, numerical calculation is not the main purpose of a CAS.
 A CAS' main purpose, and what sets a CAS apart from most calculators, is
 symbolic manipulation.
 As such, when asked to divide 
\begin_inset Formula $36/72$
\end_inset

, a CAS will respond 
\begin_inset Formula $1/2$
\end_inset

 rather than 
\begin_inset Formula $0.5$
\end_inset

 unless explicitly commanded to respond with a decimal (called floating
 point in the computer world) representation.
 Similarly, 
\begin_inset Formula $\sin(2)$
\end_inset

, 
\begin_inset Formula $\pi$
\end_inset

, 
\begin_inset Formula $e$
\end_inset

, 
\begin_inset Formula $\sqrt{7}$
\end_inset

 and other irrational numbers are interpreted symbolically as 
\begin_inset Formula $\sin(2)$
\end_inset

, 
\begin_inset Formula $\pi$
\end_inset

, 
\begin_inset Formula $e$
\end_inset

, 
\begin_inset Formula $\sqrt{7}$
\end_inset

 and so on rather than their floating point approximations.
 Computer algebra systems also have the ability to perform 
\begin_inset Quotes eld
\end_inset

arbitrary precision
\begin_inset Quotes erd
\end_inset

 calculations.
 In other words, the user can specify how many decimal places to use in
 floating point calculations, and does not have to worry much about overflow
 errors.
 For example, a CAS will return all 158 digits of 
\begin_inset Formula $100!$
\end_inset

 when asked.
 But, as already noted, the real strength of a computer algebra system is
 the manipulation of variable expressions.
 For example, a CAS can be used to differentiate 
\begin_inset Formula $x^{2}\sin x$
\end_inset

.
 It will return 
\begin_inset Formula $2x\sin x+x^{2}\cos x$
\end_inset

 as it should.
 Computer algebra systems can accomplish many tasks that were not too long
 ago relegated to pencil and paper.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
computer algebra system|)
\end_layout

\end_inset

 The purpose of this document is to acquaint the reader with many of the
 features of Maxima
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
All examples were written and executed using Maxima 5.22.1.
 They should run on all later versions as well.
\end_layout

\end_inset

 as they may be applied to solving common problems in a standard calculus
 sequence.
 
\end_layout

\begin_layout Subsection
Using Maxima
\end_layout

\begin_layout Standard
Maxima itself is a command line program and can be started by issuing the
 command 
\family typewriter
maxima
\family default
.
 For a few, this is the ideal environment for computer algebra.
 But for most computer users it is unfamiliar and may seem quite arcane.
 Not by accident, Maxima includes the capability of running as a backend
 to a graphical user interface (GUI).
 One such GUI is wxMaxima
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
wxMaxima
\end_layout

\end_inset

.
 As is Maxima, wxMaxima is open source software, freely available for anyone's
 use.
 The use of wxMaxima allows for a more modern computing experience with
 editable inputs, menus, and buttons.
 For most, this will be the desired environment for using Maxima.
 A link to wxMaxima and a list of other Maxima-related software can be found
 at
\end_layout

\begin_layout Standard
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{http://maxima.sourceforge.net/relatedprojects.html}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Reading the examples
\end_layout

\begin_layout Standard
Maxima distinguishes user input from its output by labeling each line with
 either 
\family typewriter
(%i#)
\family default
 for input or 
\family typewriter
(%o#)
\family default
 for output.
 It numbers input and output lines consecutively, and the output for a given
 input line will be labeled with the same number.
 The 
\begin_inset Quotes eld
\end_inset


\family typewriter
/
\family default

\begin_inset Quotes erd
\end_inset

 at the end of a line indicates that it is continued on the next.
 For example, this excerpt from a Maxima session shows input 6 being 
\begin_inset Formula $69^{3}$
\end_inset

 with output 6 being 
\begin_inset Formula $328,509$
\end_inset

 (which is 
\begin_inset Formula $69^{3}$
\end_inset

); and it shows the value of 
\begin_inset Formula $100!$
\end_inset

 which covers 3 lines!
\end_layout

\begin_layout LyX-Code
(%i6) 69^3;
\end_layout

\begin_layout LyX-Code
(%o6)                               328509
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i7) 100!;
\end_layout

\begin_layout LyX-Code
(%o7) 9332621544394415268169923885626670049071596826438162146/
\end_layout

\begin_layout LyX-Code
8592963895217599993229915608941463976156518286253697920827223/
\end_layout

\begin_layout LyX-Code
758251185210916864000000000000000000000000
\end_layout

\begin_layout Section
Basics
\end_layout

\begin_layout Standard
Most basic calculations in Maxima are done as would be done on a graphing
 calculator.
 Here are a few simple examples.
 
\end_layout

\begin_layout LyX-Code
(%i5) 3-33/72+1/12;
\end_layout

\begin_layout LyX-Code
                                     21
\end_layout

\begin_layout LyX-Code
(%o5)                                --
\end_layout

\begin_layout LyX-Code
                                     8
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i6) 69^3;
\end_layout

\begin_layout LyX-Code
(%o6)                               328509
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i7) 100!;
\end_layout

\begin_layout LyX-Code
(%o7) 9332621544394415268169923885626670049071596826438162146/
\end_layout

\begin_layout LyX-Code
8592963895217599993229915608941463976156518286253697920827223/
\end_layout

\begin_layout LyX-Code
758251185210916864000000000000000000000000
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i8) sin(2);
\end_layout

\begin_layout LyX-Code
(%o8)                               sin(2)
\end_layout

\begin_layout Standard
Notice that Maxima does exact (symbolic) calculations whenever possible.
 In order to force a floating point
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
floating point
\end_layout

\end_inset

 (decimal
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
decimal representation|see
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

floating point
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

) calculation, use the 
\family typewriter
ev(
\begin_inset Formula $\cdot$
\end_inset

,numer)
\family default
 command, or just include floating point numbers in the expression.
 
\end_layout

\begin_layout LyX-Code
(%i8) ev(21/8,numer)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

command!
\backslash
texttt{ev($
\backslash
cdot$,numer)}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "ex:ev_numer1"

\end_inset

;
\end_layout

\begin_layout LyX-Code
(%o8)                                2.625
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i9) ev(sin(2),numer);
\end_layout

\begin_layout LyX-Code
(%o9)                          0.90929742682568
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i10) 21.0/8;
\end_layout

\begin_layout LyX-Code
(%o10)                               2.625
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i11) sin(2.0);
\end_layout

\begin_layout LyX-Code
(%o11)                         0.90929742682568
\end_layout

\begin_layout Standard

\family typewriter
ev()
\family default
 is an example of one Maxima command that is not intuitive.
 It's not something a user would likely try without somehow being informed
 of it first.
 Luckily, most commands needed for common calculus problems are intuitive,
 or at least not surprising.
 For example, 
\family typewriter
sin()
\family default
, 
\family typewriter
cos()
\family default
, 
\family typewriter
tan()
\family default
 and so on are used for trig functions; 
\family typewriter
asin()
\family default
, 
\family typewriter
acos()
\family default
, 
\family typewriter
atan()
\family default
 and so on for inverse trig functions; and 
\family typewriter
exp()
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{exp()}
\end_layout

\end_inset


\end_layout

\end_inset


\family default
 and 
\family typewriter
log()
\family default
 for the natural base exponentials and logarithms.
 For more advanced computations, 
\family typewriter
diff()
\family default
 and 
\family typewriter
integrate()
\family default
 are used for differentiation and integration, 
\family typewriter
div()
\family default
 and 
\family typewriter
curl()
\family default
 for divergence and curl, and 
\family typewriter
solve()
\family default
 to solve equations or systems of equations.
 Examples of these commands are upcoming.
\end_layout

\begin_layout Subsection
Basic arithmetic
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
arithmetic
\end_layout

\end_inset

 commands
\end_layout

\begin_layout Subsubsection
Addition, Subtraction, Multiplication, and Division
\end_layout

\begin_layout Standard
The binary operations of addition
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
addition
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sum!arithmetic|see
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

addition
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

, subtraction
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
subtraction
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
difference!arithmetic|see
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

subtraction
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

, multiplication
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
multiplication
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
product!arithmetic|see
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

multiplication
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

, and division
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
division
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
quotient!arithmetic|see
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

division
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

 are performed by placing the two quantities on opposite sides of the 
\begin_inset Formula $+$
\end_inset

, 
\begin_inset Formula $-$
\end_inset

, 
\begin_inset Formula $*$
\end_inset

, and 
\begin_inset Formula $/$
\end_inset

 sign, respectively.
 Maxima obeys the standard order of operations so parentheses are used to
 apply operators in other orders.
 
\end_layout

\begin_layout LyX-Code
(%i2) print
\begin_inset Index idx
status open

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{print()}
\end_layout

\end_inset


\end_layout

\end_inset

(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

Maxima obeys the standard order of operations
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

)$
\end_layout

\begin_layout LyX-Code
      2/3+7/8;
\end_layout

\begin_layout LyX-Code
      2/(3+7)/8;
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
Maxima obeys the standard order of operations
\end_layout

\begin_layout LyX-Code
                                      37
\end_layout

\begin_layout LyX-Code
(%o3)                                 --
\end_layout

\begin_layout LyX-Code
                                      24
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                      1
\end_layout

\begin_layout LyX-Code
(%o4)                                 --
\end_layout

\begin_layout LyX-Code
                                      40
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i5) print(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

Maxima must be told what to do with some symbolic expressions
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

)$
\end_layout

\begin_layout LyX-Code
      u+3*u-17*(u-v);
\end_layout

\begin_layout LyX-Code
      expand
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{expand()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "ex:expand1"

\end_inset

(%);
\end_layout

\begin_layout LyX-Code
      (u-v)*(2*u+3*v)*(u+9*v);
\end_layout

\begin_layout LyX-Code
      expand(%);
\end_layout

\begin_layout LyX-Code
      (u^2-v^2)/(u+v);
\end_layout

\begin_layout LyX-Code
      fullratsimp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{fullratsimp()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "ex:fullratsimp1"

\end_inset

(%);
\end_layout

\begin_layout LyX-Code
Maxima must be told what to do with some symbolic expressions 
\end_layout

\begin_layout LyX-Code
(%o6)                         4 u - 17 (u - v)
\end_layout

\begin_layout LyX-Code
(%o7)                            17 v - 13 u
\end_layout

\begin_layout LyX-Code
(%o8)                   (u - v) (3 v + 2 u) (9 v + u)
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                            3        2       2        3
\end_layout

\begin_layout LyX-Code
(%o9)                 - 27 v  + 6 u v  + 19 u  v + 2 u
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                    2    2
\end_layout

\begin_layout LyX-Code
                                   u  - v
\end_layout

\begin_layout LyX-Code
(%o10)                             -------
\end_layout

\begin_layout LyX-Code
                                    v + u
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%o11)                              u - v
\end_layout

\begin_layout Subsubsection
Exponents
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
exponents
\end_layout

\end_inset

 and Factorials
\end_layout

\begin_layout Standard
To raise 
\begin_inset Formula $b$
\end_inset

 to the power
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
power|
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

see{exponents}
\end_layout

\end_inset


\end_layout

\end_inset

 
\begin_inset Formula $p$
\end_inset

, use the binary operator ^ as in 
\begin_inset Formula $b$
\end_inset

^
\begin_inset Formula $p$
\end_inset

.
 Use the postfix operator ! for the factorial
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
factorial
\end_layout

\end_inset

 of a quantity.
 
\end_layout

\begin_layout LyX-Code
(%i1)  5^
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $\hat{}$
\end_inset

@
\begin_inset Formula $\hat{}$
\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
exponents!
\begin_inset Formula $\hat{\ }$
\end_inset


\end_layout

\end_inset

55;
\end_layout

\begin_layout LyX-Code
(%o1)              277555756156289135105907917022705078125
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i2)  121!;
\end_layout

\begin_layout LyX-Code
(%o2)  80942985252734437396816228454493508299708230630970160704577623362849766
\backslash

\end_layout

\begin_layout LyX-Code
042664052171339177399791018273828707418507890495685666343931838274504771621484
\backslash

\end_layout

\begin_layout LyX-Code
1147650721760223072092160000000000000000000000000000
\end_layout

\begin_layout Subsubsection
Square and other roots
\end_layout

\begin_layout Standard
Use the 
\family typewriter
sqrt()
\family default
 command for the square root
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
root!square
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
square root|see
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

root, square
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

 of a quantity.
 Use rational exponents for other roots
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
root!other than square
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
cube root|see
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

root, other than square
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

.
 
\end_layout

\begin_layout LyX-Code
(%i1) sqrt
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{sqrt()}
\end_layout

\end_inset


\end_layout

\end_inset

(100);
\end_layout

\begin_layout LyX-Code
(%o1)                                10
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i2) sqrt(1911805231500);
\end_layout

\begin_layout LyX-Code
(%o2)                          54870 sqrt(635)
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i3) sqrt(x^6);
\end_layout

\begin_layout LyX-Code
                                         3
\end_layout

\begin_layout LyX-Code
(%o3)                              abs(x)
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i4) 8^
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $\hat{}$
\end_inset

@
\begin_inset Formula $\hat{}$
\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
exponents!
\begin_inset Formula $\hat{\ }$
\end_inset


\end_layout

\end_inset

(1/3);
\end_layout

\begin_layout LyX-Code
(%o4)                                 2
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i5) 128^(1/4);
\end_layout

\begin_layout LyX-Code
                                      1/4
\end_layout

\begin_layout LyX-Code
(%o5)                              2 8
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i6) 34^(1/5);
\end_layout

\begin_layout LyX-Code
                                      1/5
\end_layout

\begin_layout LyX-Code
(%o6)                               34
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i7) 34.0^(1/5);
\end_layout

\begin_layout LyX-Code
(%o7)                         2.024397458499885
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i8) sqrt(x)^(1/4);
\end_layout

\begin_layout LyX-Code
                                     1/8
\end_layout

\begin_layout LyX-Code
(%o8)                               x
\end_layout

\begin_layout Section
Precalculus
\end_layout

\begin_layout Subsection
Trigonometry
\end_layout

\begin_layout Subsubsection
Trigonometric functions and 
\begin_inset Formula $\pi$
\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
trigonometric functions
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Use 
\family typewriter
sin()
\family default
 to find the sine
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sine
\end_layout

\end_inset

 of an angle, 
\family typewriter
cos()
\family default
 for the cosine
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
cosine
\end_layout

\end_inset

, 
\family typewriter
tan()
\family default
 for the tangent
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
tangent!trigonometric
\end_layout

\end_inset

, 
\family typewriter
sec()
\family default
 for the secant
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
secant!trigonometric
\end_layout

\end_inset

, 
\family typewriter
csc()
\family default
 for the cosecant
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
cosecant
\end_layout

\end_inset

, and 
\family typewriter
cot()
\family default
 for the cotangent
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
cotangent
\end_layout

\end_inset

.
 Angles must be given in radians.
 Of course, an angle measure in degrees
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
degrees to radians
\end_layout

\end_inset

 may be converted to radians by multiplying by 
\begin_inset Formula $\frac{\pi}{180}$
\end_inset

.
 Use 
\family typewriter
%pi
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $\pi$
\end_inset

@
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{
\backslash
%pi}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $\pi$
\end_inset

@
\begin_inset Formula $\pi$
\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pi
\end_layout

\end_inset


\family default
 for 
\begin_inset Formula $\pi$
\end_inset

.
\end_layout

\begin_layout LyX-Code
(%i1) cos(%pi/3)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{cos()}
\end_layout

\end_inset


\end_layout

\end_inset

;
\end_layout

\begin_layout LyX-Code
                                      1
\end_layout

\begin_layout LyX-Code
(%o1)                                 -
\end_layout

\begin_layout LyX-Code
                                      2
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i2) ev(sin(%pi/3),numer)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{ev($
\backslash
cdot$,numer)}
\end_layout

\end_inset


\end_layout

\end_inset

;
\end_layout

\begin_layout LyX-Code
(%o2)                         0.86602540378444
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i3) csc(45*%pi/180)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{csc()}
\end_layout

\end_inset


\end_layout

\end_inset

;
\end_layout

\begin_layout LyX-Code
(%o3)                              sqrt(2)
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i4) tan(%pi/8)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{tan()}
\end_layout

\end_inset


\end_layout

\end_inset

;
\end_layout

\begin_layout LyX-Code
                                      %pi
\end_layout

\begin_layout LyX-Code
(%o4)                             tan(---)
\end_layout

\begin_layout LyX-Code
                                       8
\end_layout

\begin_layout Subsubsection
Inverse trigonometric functions
\end_layout

\begin_layout Standard
Use 
\family typewriter
asin()
\family default
 to find the Arcsine
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Arcsine
\end_layout

\end_inset

 of a value, 
\family typewriter
acos()
\family default
 for the Arccosine
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Arccosine
\end_layout

\end_inset

, 
\family typewriter
atan()
\family default
 for the Arctangent
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Arctangent
\end_layout

\end_inset

, 
\family typewriter
asec()
\family default
 for the Arcsecant
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Arcsecant
\end_layout

\end_inset

, 
\family typewriter
acsc()
\family default
 for the Arccosecant
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Arccosecant
\end_layout

\end_inset

, and 
\family typewriter
acot()
\family default
 for the Arccotangent
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Arccotangent
\end_layout

\end_inset

.
 Angles will be given in radians.
 Of course, an angle measure in radians
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
radians to degrees
\end_layout

\end_inset

 may be converted to degrees by multiplying by 
\begin_inset Formula $\frac{180}{\pi}$
\end_inset

.
 
\end_layout

\begin_layout LyX-Code
(%i1) acos(1/2)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{acos()}
\end_layout

\end_inset


\end_layout

\end_inset

;
\end_layout

\begin_layout LyX-Code
                                     %pi
\end_layout

\begin_layout LyX-Code
(%o1)                                ---
\end_layout

\begin_layout LyX-Code
                                      3
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i2) ev(asin(sqrt(3)/2),numer)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{ev($
\backslash
cdot$,numer)}
\end_layout

\end_inset


\end_layout

\end_inset

;
\end_layout

\begin_layout LyX-Code
(%o2)                         1.047197551196598
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i3) 180*atan(1)/%pi
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{atan()}
\end_layout

\end_inset


\end_layout

\end_inset

;
\end_layout

\begin_layout LyX-Code
(%o3)                                45
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i4) acsc(8)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{acsc()}
\end_layout

\end_inset


\end_layout

\end_inset

;
\end_layout

\begin_layout LyX-Code
(%o4)                              acsc(8)
\end_layout

\begin_layout Subsection
Assignment and Function definition
\end_layout

\begin_layout Standard
One of the most basic operations of any computer algebra system is variable
 assignment
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
assignment
\end_layout

\end_inset

.
 A variable may be assigned a value using the : operator.
 In Maxima, the command 
\family typewriter
a:3;
\family default
 sets 
\family typewriter
a
\family default
 equal to 
\family typewriter
3
\family default
.
 But more useful than assigning numerical values to single-letter variables,
 Maxima allows multiple-letter variables, as do most programming languages.
 For example, 
\family typewriter
eqn:2*x^2+3*x-5=0;
\family default
 sets the variable 
\family typewriter
eqn
\family default
 equal to the equation 
\begin_inset Formula $2x^{2}+3x-5=0$
\end_inset

, and 
\family typewriter
expr:sin(2*x)
\family default
 sets 
\family typewriter
expr
\family default
 equal to the expression 
\begin_inset Formula $\sin(2x)$
\end_inset

.
\end_layout

\begin_layout Standard
Similar to assignment is function definition
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
function definition
\end_layout

\end_inset

.
 The primary difference is a function is designed for evaluation at various
 values of the independent variables where expressions are generally not.
 In the end, though, which one to use will be a matter of preference more
 than anything pragmatic.
 The notation for function definition in Maxima is almost identical to that
 of pencil and paper mathematics.
 Simply use function notation with a 
\family typewriter
:=
\family default
 where you would use 
\family typewriter
=
\family default
 on paper.
 For example, 
\family typewriter
f(x):=2*sin(x^3)+cot(x)
\family default
 in Maxima is equivalent to 
\begin_inset Formula $f(x)=2\sin(x^{3})+\cot(x)$
\end_inset

 on paper.
 
\end_layout

\begin_layout LyX-Code
(%i1) a:
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
:
\end_layout

\end_inset

3$
\end_layout

\begin_layout LyX-Code
       display
\begin_inset Index idx
status open

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{display()}
\end_layout

\end_inset


\end_layout

\end_inset

(a)$
\end_layout

\begin_layout LyX-Code
                                    a = 3 
\end_layout

\begin_layout LyX-Code
(%i3) f(x):=
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
:=
\end_layout

\end_inset

a*x^2+b*x+c; 
\end_layout

\begin_layout LyX-Code
      expr:a*x^2+b*x+c; 
\end_layout

\begin_layout LyX-Code
      f(2); 
\end_layout

\begin_layout LyX-Code
      ev
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{ev($
\backslash
cdot$,$equations$)}
\end_layout

\end_inset


\end_layout

\end_inset

(expr,x=2);
\end_layout

\begin_layout LyX-Code
                                      2
\end_layout

\begin_layout LyX-Code
(%o3)                      f(x) := a x  + b x + c
\end_layout

\begin_layout LyX-Code
                                  2
\end_layout

\begin_layout LyX-Code
(%o4)                          3 x  + b x + c
\end_layout

\begin_layout LyX-Code
(%o5)                           c + 2 b + 12
\end_layout

\begin_layout LyX-Code
(%o6)                           c + 2 b + 12
\end_layout

\begin_layout LyX-Code
(%i7) ev(f(x),b=-5,c=12);
\begin_inset CommandInset label
LatexCommand label
name "ex:ev_equations1"

\end_inset


\end_layout

\begin_layout LyX-Code
      ev(expr,b=-5,c=12);
\end_layout

\begin_layout LyX-Code
                                  2
\end_layout

\begin_layout LyX-Code
(%o7)                          3 x  - 5 x + 12
\end_layout

\begin_layout LyX-Code
                                  2
\end_layout

\begin_layout LyX-Code
(%o8)                          3 x  - 5 x + 12
\end_layout

\begin_layout LyX-Code
(%i9) g(x,y):=x^2-y^2; 
\end_layout

\begin_layout LyX-Code
      g(expr,y); 
\end_layout

\begin_layout LyX-Code
      g(expr,f(y));
\end_layout

\begin_layout LyX-Code
                                         2    2
\end_layout

\begin_layout LyX-Code
(%o9)                        g(x, y) := x  - y
\end_layout

\begin_layout LyX-Code
                                2           2    2
\end_layout

\begin_layout LyX-Code
(%o10)                      (3 x  + b x + c)  - y
\end_layout

\begin_layout LyX-Code
                         2           2       2           2
\end_layout

\begin_layout LyX-Code
(%o11)               (3 x  + b x + c)  - (3 y  + b y + c)
\end_layout

\begin_layout LyX-Code
(%i12) expand(%)
\begin_inset CommandInset label
LatexCommand label
name "ex:expand2"

\end_inset

;
\end_layout

\begin_layout LyX-Code
            4        3        2    2  2                4        3      
  2
\end_layout

\begin_layout LyX-Code
(%o12) - 9 y  - 6 b y  - 6 c y  - b  y  - 2 b c y + 9 x  + 6 b x  + 6 c
 x
\end_layout

\begin_layout LyX-Code
                                                                 2  2
\end_layout

\begin_layout LyX-Code
                                                             + b  x  + 2
 b c x
\end_layout

\begin_layout Subsection
Exponentials and Logarithms
\end_layout

\begin_layout Standard
In addition to using the 
\family typewriter
^
\family default
 operator for exponentials
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
exponents
\end_layout

\end_inset

, Maxima provides the 
\family typewriter
exp()
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{exp()}
\end_layout

\end_inset


\end_layout

\end_inset


\family default
 function for exponentiation base 
\begin_inset Formula $e$
\end_inset

, so 
\family typewriter
exp(x)
\family default
 is the same as 
\family typewriter
%e^x
\family default
.
 Maxima only provides the natural (base 
\begin_inset Formula $e$
\end_inset

) logarithm
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
logarithms
\end_layout

\end_inset

.
 Therefore, a useful definition to make is 
\end_layout

\begin_layout LyX-Code
logb(b,x):=log(x)/log(b);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{logb()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
for calculating 
\begin_inset Formula $\log_{b}(x)$
\end_inset

.
 
\end_layout

\begin_layout LyX-Code
(%i35) log
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{log()}
\end_layout

\end_inset


\end_layout

\end_inset

(%e);
\end_layout

\begin_layout LyX-Code
       log(3);
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%o35)                                 1
\end_layout

\begin_layout LyX-Code
(%o36)                              log(3)
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i37) expr:log(x*%e^
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $\hat{}$
\end_inset

@
\begin_inset Formula $\hat{}$
\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
exponents!
\begin_inset Formula $\hat{\ }$
\end_inset


\end_layout

\end_inset

y);
\end_layout

\begin_layout LyX-Code
       expr=radcan
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{radcan()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "ex:radcan1"

\end_inset

(expr);
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                          y
\end_layout

\begin_layout LyX-Code
(%o37)                            log(x %e )
\end_layout

\begin_layout LyX-Code
                                    y
\end_layout

\begin_layout LyX-Code
(%o38)                      log(x %e ) = y + log(x)
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i39) expr:%e^(r*log(x));
\end_layout

\begin_layout LyX-Code
       expr=radcan(expr);
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                    r log(x)
\end_layout

\begin_layout LyX-Code
(%o39)                            %e
\end_layout

\begin_layout LyX-Code
                                  r log(x)    r
\end_layout

\begin_layout LyX-Code
(%o40)                          %e         = x
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i41) logb(b,x):=log(x)/log(b);
\end_layout

\begin_layout LyX-Code
       a:logb(3,27)$
\end_layout

\begin_layout LyX-Code
       a=radcan(a);
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                           log(x)
\end_layout

\begin_layout LyX-Code
(%o41)                       logb(b, x) := ------
\end_layout

\begin_layout LyX-Code
                                           log(b)
\end_layout

\begin_layout LyX-Code
                                  log(27)
\end_layout

\begin_layout LyX-Code
(%o43)                            ------- = 3
\end_layout

\begin_layout LyX-Code
                                  log(3)
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i44) a:log(30*x^2/z^5);
\end_layout

\begin_layout LyX-Code
       ev(a,logexpand=super)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{ev($
\backslash
cdot$,logexpand)}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "ex:logexpand1"

\end_inset

;
\end_layout

\begin_layout LyX-Code
       radcan(a);
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                          2
\end_layout

\begin_layout LyX-Code
                                      30 x
\end_layout

\begin_layout LyX-Code
(%o44)                            log(-----)
\end_layout

\begin_layout LyX-Code
                                        5
\end_layout

\begin_layout LyX-Code
                                       z
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%o45)                  - 5 log(z) + 2 log(x) + log(30)
\end_layout

\begin_layout LyX-Code
(%o46)         - 5 log(z) + 2 log(x) + log(5) + log(3) + log(2)
\end_layout

\begin_layout Subsection
Constants
\end_layout

\begin_layout Standard
The ubiquitous constants
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
constants
\end_layout

\end_inset

 
\begin_inset Formula $\pi$
\end_inset

, 
\begin_inset Formula $e$
\end_inset

, and 
\begin_inset Formula $i$
\end_inset

 are known to Maxima.
 Use 
\family typewriter
%pi
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $\pi$
\end_inset

@
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{
\backslash
%pi}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $\pi$
\end_inset

@
\begin_inset Formula $\pi$
\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pi
\end_layout

\end_inset


\family default
 for 
\begin_inset Formula $\pi$
\end_inset

, 
\family typewriter
%e
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $e$
\end_inset

@
\family typewriter

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{
\backslash
%e}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $e$
\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
e
\end_layout

\end_inset


\family default
 for 
\begin_inset Formula $e$
\end_inset

, and 
\family typewriter
%i
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $i$
\end_inset

@
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{
\backslash
%i}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $i$
\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
i
\end_layout

\end_inset


\family default
 for 
\begin_inset Formula $i$
\end_inset

.
\end_layout

\begin_layout Subsection
Solving equations
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
solving equations|(
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In precalculus, students learn to solve equations by performing operations
 equally on both sides of a given equation, ultimately isolating the desired
 variable.
 Maxima makes it easy to demonstrate this process electronically.
 This gives students a way to check their work, and test their equation
 solving skills.
 In order to apply a given operation to both sides of an equation, simply
 assign a variable to the equation and apply the operation to that variable.
 
\end_layout

\begin_layout LyX-Code
(%i47) eqn:(3*x-5)/(17*x+4)=2;
\end_layout

\begin_layout LyX-Code
                                 3 x - 5
\end_layout

\begin_layout LyX-Code
(%o47)                           -------- = 2
\end_layout

\begin_layout LyX-Code
                                 17 x + 4
\end_layout

\begin_layout LyX-Code
(%i48) eqn2:eqn*(17*x+4);
\end_layout

\begin_layout LyX-Code
(%o48)                      3 x - 5 = 2 (17 x + 4)
\end_layout

\begin_layout LyX-Code
(%i49) eqn3:expand(eqn2)
\begin_inset CommandInset label
LatexCommand label
name "ex:expand3"

\end_inset

;
\end_layout

\begin_layout LyX-Code
(%o49)                        3 x - 5 = 34 x + 8
\end_layout

\begin_layout LyX-Code
(%i56) eqn4:eqn3+5;
\end_layout

\begin_layout LyX-Code
(%o56)                          3 x = 34 x + 13
\end_layout

\begin_layout LyX-Code
(%i57) eqn5:eqn4-34*x;
\end_layout

\begin_layout LyX-Code
(%o57)                            - 31 x = 13
\end_layout

\begin_layout LyX-Code
(%i58) eqn6:eqn5/-31;
\end_layout

\begin_layout LyX-Code
                                         13
\end_layout

\begin_layout LyX-Code
(%o58)                             x = - --
\end_layout

\begin_layout LyX-Code
                                         31
\end_layout

\begin_layout LyX-Code
(%i64) print(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

Checking our work:
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

)$
\end_layout

\begin_layout LyX-Code
       ev(eqn,eqn6);
\begin_inset CommandInset label
LatexCommand label
name "ex:ev_equations2"

\end_inset


\end_layout

\begin_layout LyX-Code
       ev(eqn,eqn6,pred);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{ev($
\backslash
cdot$,pred)}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "ex:ev_pred1"

\end_inset


\end_layout

\begin_layout LyX-Code
Checking our work: 
\end_layout

\begin_layout LyX-Code
(%o65)                               2 = 2
\end_layout

\begin_layout LyX-Code
(%o66)                               true
\end_layout

\begin_layout Standard
Of course when the solution process is not important, Maxima provides a
 single command for solving equations.
 Use 
\family typewriter
solve()
\family default
 to solve equations or systems of equations.
 Systems of equations are accepted by Maxima using vector notation.
 Delimit the system using square brackets (
\family typewriter
[]
\family default
), separating equations by commas.
 
\end_layout

\begin_layout LyX-Code
(%i6) solve
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{solve()}
\end_layout

\end_inset


\end_layout

\end_inset

(eqn);
\end_layout

\begin_layout LyX-Code
                                         13
\end_layout

\begin_layout LyX-Code
(%o6)                             [x = - --]
\end_layout

\begin_layout LyX-Code
                                         31
\end_layout

\begin_layout LyX-Code
(%i7) print(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

When it is not obvious for which variable Maxima
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

,
\end_layout

\begin_layout LyX-Code
          
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

should solve, specify it:
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

)$
\end_layout

\begin_layout LyX-Code
      solve(a*x^2-b*x+c,x);
\end_layout

\begin_layout LyX-Code
When it is not obvious for which variable Maxima
\end_layout

\begin_layout LyX-Code
should solve, specify it:
\end_layout

\begin_layout LyX-Code
                          2                         2
\end_layout

\begin_layout LyX-Code
                   sqrt(b  - 4 a c) - b      sqrt(b  - 4 a c) + b
\end_layout

\begin_layout LyX-Code
(%o8)       [x = - --------------------, x = --------------------]
\end_layout

\begin_layout LyX-Code
                           2 a                       2 a
\end_layout

\begin_layout LyX-Code
(%i9) solve(a*x^2-b*x+c,b);
\end_layout

\begin_layout LyX-Code
                                        2
\end_layout

\begin_layout LyX-Code
                                     a x  + c
\end_layout

\begin_layout LyX-Code
(%o9)                           [b = --------]
\end_layout

\begin_layout LyX-Code
                                        x
\end_layout

\begin_layout LyX-Code
(%i10) solve([3*x+4*y=c,2*x-3*y=d],[x,y]
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
[]
\end_layout

\end_inset

);
\end_layout

\begin_layout LyX-Code
                             4 d + 3 c      2 c - 3 d
\end_layout

\begin_layout LyX-Code
(%o10)                 [[x = ---------, y = ---------]]
\end_layout

\begin_layout LyX-Code
                                17             17
\end_layout

\begin_layout Subsubsection
Example (Maxima fails to solve an equation)
\end_layout

\begin_layout Standard
Solve for 
\begin_inset Formula $x$
\end_inset

: 
\begin_inset Formula 
\[
2-\frac{x}{\sqrt{1-x^{2}}}=0
\]

\end_inset


\end_layout

\begin_layout LyX-Code
(%i1)   eqn:2-x/sqrt(1-x^2)=0;
\end_layout

\begin_layout LyX-Code
        print(
\begin_inset Quotes eld
\end_inset

Maxima fails to solve the equation:
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
        xx:solve(2-x/sqrt(1-x^2)=0);
\end_layout

\begin_layout LyX-Code
        print(
\begin_inset Quotes eld
\end_inset

But with a little help...
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
        print(
\begin_inset Quotes eld
\end_inset

(squaring both sides)
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
        xx:solve(xx[1]
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
[]
\end_layout

\end_inset

^2);
\end_layout

\begin_layout LyX-Code
        print(
\begin_inset Quotes eld
\end_inset

Check results:
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
        ev(eqn,xx[1]);
\end_layout

\begin_layout LyX-Code
        ev(eqn,xx[1],pred)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{ev($
\backslash
cdot$,pred)}
\end_layout

\end_inset


\end_layout

\end_inset

;
\end_layout

\begin_layout LyX-Code
        ev(eqn,xx[2]);
\end_layout

\begin_layout LyX-Code
        ev(eqn,xx[2],pred);
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                      x
\end_layout

\begin_layout LyX-Code
(%o1)                       2 - ------------ = 0
\end_layout

\begin_layout LyX-Code
                                          2
\end_layout

\begin_layout LyX-Code
                                sqrt(1 - x )
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
Maxima fails to solve the equation: 
\end_layout

\begin_layout LyX-Code
                                             2
\end_layout

\begin_layout LyX-Code
(%o3)                       [x = 2 sqrt(1 - x )]
\end_layout

\begin_layout LyX-Code
But with a little help...
 
\end_layout

\begin_layout LyX-Code
(squaring both sides) 
\end_layout

\begin_layout LyX-Code
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout LyX-Code
                                  2            2
\end_layout

\begin_layout LyX-Code
(%o6)                   [x = - -------, x = -------]
\end_layout

\begin_layout LyX-Code
                               sqrt(5)      sqrt(5)
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
Check results:
\end_layout

\begin_layout LyX-Code
(%o8)                               4 = 0
\end_layout

\begin_layout LyX-Code
(%o9)                               false
\end_layout

\begin_layout LyX-Code
(%o10)                              0 = 0
\end_layout

\begin_layout LyX-Code
(%o11)                               true
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
solving equations|)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula ${\displaystyle x=\frac{2}{\sqrt{5}}}$
\end_inset

 is the only solution.
\end_layout

\begin_layout Subsection
Simplification
\end_layout

\begin_layout Standard
Simplification of expressions is one of the most difficult jobs for a computer
 algebra system even though there are established routines for standard
 simplification procedures.
 The difficulty is in choosing which simplification procedures to apply
 when.
 For example, certain mathematical situations require factoring while others
 require expanding.
 A computer algebra system has no way to determine what the situation demands.
 Therefore, different simplification procedures are available for different
 purposes.
 Very little simplification is done automatically.
 More than one simplification procedure may be applied to a single expression.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
setlength{
\backslash
extrarowheight}{2pt}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="3">
<features islongtable="true" longtabularalignment="center">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="3in">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Command
\series default
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Action
\series default
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Examples
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
fullratsimp()
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A somewhat generic simplification routine.
 Start with this.
 If it does not do what you hope, try one of the more specific routines.
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset

 
\begin_inset CommandInset ref
LatexCommand ref
reference "ex:fullratsimp1"

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset

 
\begin_inset CommandInset ref
LatexCommand ref
reference "ex:fullratsimp2"

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
expand()
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Products of sums and exponentiated sums are multiplied out.
 Logarithms are not expanded.
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset

 
\begin_inset CommandInset ref
LatexCommand ref
reference "ex:expand1"

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset

 
\begin_inset CommandInset ref
LatexCommand ref
reference "ex:expand2"

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset

 
\begin_inset CommandInset ref
LatexCommand ref
reference "ex:expand3"

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
factor()
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If the argument is an integer, factors the integer.
 If the argument is anything else, factors the argument into factors irreducible
 over the integers.
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
below
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
radcan()
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Simplifies logarithmic, exponential, and radical expressions into a canonical
 form.
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset

 
\begin_inset CommandInset ref
LatexCommand ref
reference "ex:radcan1"

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ev(
\begin_inset Formula $\cdot$
\end_inset

,logexpand=super)
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Expands logarithms of products, quotients and exponentials.
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset

 
\begin_inset CommandInset ref
LatexCommand ref
reference "ex:logexpand1"

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
logcontract()
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Contracts multiple logarithmic terms into single logarithms.
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
below
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
trigsimp()
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Employs the identity 
\begin_inset Formula $\sin^{2}x+\cos^{2}x=1$
\end_inset

 to simplify expressions containing tan, sec, etc., to sin and cos.
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
below
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
trigexpand()
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Expands trigonometric functions of angle sums and of angle multiples.
 For best results, the argument should be expanded.
 May require multiple applications.
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
below
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
trigreduce()
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Combines products and powers of sines and cosines into sines and cosines
 of multiples of their argument.
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
below
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
trigrat()
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gives a canonical simplified form of a trigonometric expression.
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
below
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
For hyperbolic trig simplification, use 
\family typewriter
trigsimp()
\family default
, 
\family typewriter
trigexpand()
\family default
 and 
\family typewriter
trigreduce()
\family default
.
\end_layout

\begin_layout Subsubsection
Example (factoring)
\end_layout

\begin_layout LyX-Code
(%i7) factor(1001);
\end_layout

\begin_layout LyX-Code
(%o7)                               7 11 13
\end_layout

\begin_layout LyX-Code
(%i8) factor(4*x^5-4*x^4-13*x^3+x^2-17*x+5);
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                  2          2
\end_layout

\begin_layout LyX-Code
(%o8)                 (2 x - 5) (x  + 1) (2 x  + 3 x - 1)
\end_layout

\begin_layout Standard
Note that the juxtaposition of the 7, 11, and 13 implies multiplication.
\end_layout

\begin_layout Subsubsection
Example (logcontract)
\end_layout

\begin_layout LyX-Code
(%i9) logcontract(log(3*x)-2*log(5*y));
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                       3 x
\end_layout

\begin_layout LyX-Code
(%o9)                             log(-----)
\end_layout

\begin_layout LyX-Code
                                          2
\end_layout

\begin_layout LyX-Code
                                      25 y
\end_layout

\begin_layout Subsubsection
Example (trigsimp)
\end_layout

\begin_layout LyX-Code
(%i10) trigsimp(tan(x));
\end_layout

\begin_layout LyX-Code
                                    sin(x)
\end_layout

\begin_layout LyX-Code
(%o10)                              ------
\end_layout

\begin_layout LyX-Code
                                    cos(x)
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i11) trigsimp(tan(x)^2+1);
\end_layout

\begin_layout LyX-Code
                                       1
\end_layout

\begin_layout LyX-Code
(%o11)                              -------
\end_layout

\begin_layout LyX-Code
                                       2
\end_layout

\begin_layout LyX-Code
                                    cos (x)
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i13) trigsimp(csc(x)^2-cot(x)^2);
\end_layout

\begin_layout LyX-Code
(%o13)                                 1
\end_layout

\begin_layout Subsubsection
Example (other trig simplifications)
\end_layout

\begin_layout LyX-Code
(%i22) expr:sin((a+b)*(a-b))+sin(x)^3*cos(x)^2;
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                       2       3
\end_layout

\begin_layout LyX-Code
(%o22)              cos (x) sin (x) + sin((a - b) (b + a))
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i23) trigexpand(expr);
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                       2       3
\end_layout

\begin_layout LyX-Code
(%o23)              cos (x) sin (x) + sin((a - b) (b + a))
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i24) trigexpand(expand(expr));
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                 2       3           2       2         2       2
\end_layout

\begin_layout LyX-Code
(%o24)        cos (x) sin (x) - cos(a ) sin(b ) + sin(a ) cos(b )
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i25) trigreduce(expr);
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                - sin(5 x) + sin(3 x) + 2 sin(x)        2    2
\end_layout

\begin_layout LyX-Code
(%o25)          -------------------------------- + sin(a  - b )
\end_layout

\begin_layout LyX-Code
                               16
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i26) trigrat(expr);
\end_layout

\begin_layout LyX-Code
                                                         2    2
\end_layout

\begin_layout LyX-Code
                sin(5 x) - sin(3 x) - 2 sin(x) + 16 sin(b  - a )
\end_layout

\begin_layout LyX-Code
(%o26)        - ------------------------------------------------
\end_layout

\begin_layout LyX-Code
                                       16
\end_layout

\begin_layout Standard
Compare 
\family typewriter
trigexpand(expr)
\family default
 to 
\family typewriter
trigexpand(expand(expr))
\family default
 to see that 
\family typewriter
trigexpand()
\family default
 is more effective when the arguments of the trig functions are expanded.
\end_layout

\begin_layout Subsection
Evaluation
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
evaluation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
ev()
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{ev()} summary
\end_layout

\end_inset


\end_layout

\end_inset

 command is a very powerful command for both simplification and evaluation
 of expressions.
 
\family typewriter
ev()
\family default
 can be used for simplification as in 
\family typewriter
ev(
\begin_inset Formula $\cdot$
\end_inset

,logexpand=super)
\family default
 [
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset

 
\begin_inset CommandInset ref
LatexCommand ref
reference "ex:logexpand1"

\end_inset

] or 
\family typewriter
ev(
\begin_inset Formula $\cdot$
\end_inset

,trigsimp)
\family default
 which has exactly the same effect as 
\family typewriter
trigsimp(
\begin_inset Formula $\cdot$
\end_inset

)
\family default
, but its main use is for evaluating expressions in different manners.
 
\family typewriter
ev(
\begin_inset Formula $\cdot$
\end_inset

,numer)
\family default
 [
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset

 
\begin_inset CommandInset ref
LatexCommand ref
reference "ex:ev_numer1"

\end_inset

] converts numeric expressions to floating point values.
 
\family typewriter
ev(
\begin_inset Formula $\cdot$
\end_inset

,equation(s))
\family default
 [
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset

 
\begin_inset CommandInset ref
LatexCommand ref
reference "ex:ev_equations1"

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset

 
\begin_inset CommandInset ref
LatexCommand ref
reference "ex:ev_equations2"

\end_inset

] evaluates an expression, substituting the values given by the equation(s).
 
\family typewriter
ev(
\begin_inset Formula $\cdot$
\end_inset

,pred)
\family default
 [
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset

 
\begin_inset CommandInset ref
LatexCommand ref
reference "ex:ev_pred1"

\end_inset

] evaluates expressions as if they are predicates (true or false).
 
\family typewriter
ev()
\family default
 has many more features as well, a few of which will be discussed later.
\end_layout

\begin_layout Subsection
Big floats
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
floating point
\end_layout

\end_inset


\end_layout

\begin_layout Standard
On occasion it may be desired to compute a floating point value to more
 precision than the default 16 significant figures.
 The 
\family typewriter
bfloat()
\family default
 and 
\family typewriter
fpprec()
\family default
 commands give you that capability.
 For example, if you want to compute 
\begin_inset Formula $\pi$
\end_inset

 to 100 decimal places, set 
\family typewriter
fpprec
\family default
 (short for floating point precision) to 101 and then enter 
\family typewriter
bfloat(%pi)
\family default
.
 This will show 101 digits of 
\begin_inset Formula $\pi$
\end_inset

 (1 to the left of the decimal point and 100 to the right).
\end_layout

\begin_layout LyX-Code
(%i11) fpprec: 101;
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{fpprec}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
(%o11)                                101
\end_layout

\begin_layout LyX-Code
(%i12) bfloat(%pi);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{bfloat()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
(%o12) 3.141592653589793238462643383279502884197169399375105820974944592307816
\backslash

\end_layout

\begin_layout LyX-Code
406286208998628034825342117068b0
\end_layout

\begin_layout Standard
Notice that bfloats (big floats) are given in scientific notation, using
 the letter b to separate the coefficient from the exponent.
\end_layout

\begin_layout Section
Limits
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
limits|(
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As with solving equations, Maxima has a single command for computing limits,
 but is also useful for demonstrating the ideas.
 One of the first looks at limits often involves a table of values where
 the independent variable approaches some given value.
 The table will often show the dependent variable approaching some determinable
 value, the limit.
 With the help of the 
\family typewriter
fpprintprec
\family default
 flag and the 
\family typewriter
maplist()
\family default
 command, Maxima can produce useful tables.
 The floating point print precision (
\family typewriter
fpprintprec
\family default
) flag determines how many significant digits of a floating point value
 should be displayed when printed.
 The default is 16, so does not make for concise listing.
 The value of 
\family typewriter
fpprintprec
\family default
 is set using the assignment operator, 
\family typewriter
:
\family default
, just like any variable.
 
\family typewriter
maplist()
\family default
 is used to compute the values of the dependent variable.
 
\end_layout

\begin_layout LyX-Code
(%i1) fpprintprec:7$
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{fpprintprec}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
      f(x):=sin(x)/x;
\end_layout

\begin_layout LyX-Code
      a:[1.0,1/4.0,1/16.0,1/64.0,1/256.0,1/1024.0];
\end_layout

\begin_layout LyX-Code
      maplist(f,a);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{maplist()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
                                      sin(x)
\end_layout

\begin_layout LyX-Code
(%o2)                         f(x) := ------
\end_layout

\begin_layout LyX-Code
                                        x
\end_layout

\begin_layout LyX-Code
(%o3)      [1.0, 0.25, 0.0625, 0.015625, 0.0039063, 9.765625E-4]
\end_layout

\begin_layout LyX-Code
(%o4)         [0.84147, 0.98962, 0.99935, 0.99996, 1.0, 1.0]
\end_layout

\begin_layout Standard
If only the result is desired, use the 
\family typewriter
limit()
\family default
 command.
 The command requires an expression and a variable with the value it is
 to approach.
 For limits to infinity
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
infinity
\end_layout

\end_inset

 or minus infinity, use 
\family typewriter
inf
\family default
 and 
\family typewriter
minf
\family default
 respectively.
 The result may be a number, 
\family typewriter
ind
\family default
 (indeterminate but bounded), 
\family typewriter
inf
\family default
, 
\family typewriter
minf
\family default
, 
\family typewriter
infinity
\family default
 (complex infinity), or 
\family typewriter
und
\family default
 (undefined).
 One-sided limits may be computed by adding a 
\begin_inset Quotes eld
\end_inset

plus
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

minus
\begin_inset Quotes erd
\end_inset

 argument to indicate the right-hand limit and left-hand limit respectively.
 
\end_layout

\begin_layout LyX-Code
(%i1) f(x):=sin(x)/x;
\end_layout

\begin_layout LyX-Code
      limit(f(x),x,0);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{limit()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
      limit(f(x),x,inf);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{inf}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
                                       sin(x)
\end_layout

\begin_layout LyX-Code
(%o1)                          f(x) := ------
\end_layout

\begin_layout LyX-Code
                                         x
\end_layout

\begin_layout LyX-Code
(%o2)                                 1
\end_layout

\begin_layout LyX-Code
(%o3)                                 0
\end_layout

\begin_layout LyX-Code
(%i4) f(x):=atan(x);
\end_layout

\begin_layout LyX-Code
      limit(f(x),x,minf);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{minf}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
(%o4)                          f(x) := atan(x)
\end_layout

\begin_layout LyX-Code
                                      %pi
\end_layout

\begin_layout LyX-Code
(%o5)                               - ---
\end_layout

\begin_layout LyX-Code
                                       2
\end_layout

\begin_layout LyX-Code
(%i6) f(x):=(x^2-3*x+8)/(x+2);
\end_layout

\begin_layout LyX-Code
      limit(f(x),x,-2,minus);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{minus}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
      limit(f(x),x,-2,plus);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{plus}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
      limit(f(x),x,-2);
\end_layout

\begin_layout LyX-Code
                                     2
\end_layout

\begin_layout LyX-Code
                                    x  - 3 x + 8
\end_layout

\begin_layout LyX-Code
(%o6)                       f(x) := ------------
\end_layout

\begin_layout LyX-Code
                                       x + 2
\end_layout

\begin_layout LyX-Code
(%o7)                               minf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{minf}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
(%o8)                                inf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{inf}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
(%o9)                                und
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{und}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
(%i10) limit(sin(1/x),x,0);
\end_layout

\begin_layout LyX-Code
(%o10)                                ind
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{ind}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
(%i11) limit((sqrt(3+2*x)-sqrt(3-x))/x,x,0);
\end_layout

\begin_layout LyX-Code
                                        3
\end_layout

\begin_layout LyX-Code
(%o11)                              ---------
\end_layout

\begin_layout LyX-Code
                                    2 sqrt(3)
\end_layout

\begin_layout Subsection
Example (limit of a difference quotient)
\begin_inset CommandInset label
LatexCommand label
name "ex:derivative_definition"

\end_inset


\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $f(x)=x^{3}\tan x$
\end_inset

.
 Find 
\begin_inset Formula ${\displaystyle \lim_{h\to0}\frac{f(x+h)-f(x)}{h}}$
\end_inset

.
 
\end_layout

\begin_layout LyX-Code
(%i1) f(x):=x^3*tan(x);
\end_layout

\begin_layout LyX-Code
      dq:(f(x+h)-f(x))/h;
\end_layout

\begin_layout LyX-Code
      limit(dq,h,0);
\end_layout

\begin_layout LyX-Code
                                       3
\end_layout

\begin_layout LyX-Code
(%o1)                         f(x) := x  tan(x)
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                              3               3
\end_layout

\begin_layout LyX-Code
                       (x + h)  tan(x + h) - x  tan(x)
\end_layout

\begin_layout LyX-Code
(%o2)                  -------------------------------
\end_layout

\begin_layout LyX-Code
                                      h
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                             3
\end_layout

\begin_layout LyX-Code
                               2            x
\end_layout

\begin_layout LyX-Code
(%o3)                       3 x  tan(x) + -------
\end_layout

\begin_layout LyX-Code
                                             2
\end_layout

\begin_layout LyX-Code
                                          cos (x)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
limits|)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula ${\displaystyle \lim_{h\to0}\frac{f(x+h)-f(x)}{h}=3x^{2}\tan(x)+\frac{x^{3}}{\cos^{2}(x)}}$
\end_inset

.
\end_layout

\begin_layout Section
Differentiation
\end_layout

\begin_layout Standard
As shown in example 
\begin_inset CommandInset ref
LatexCommand ref
reference "ex:derivative_definition"

\end_inset

, Maxima is capable of computing derivatives based on the definition of
 derivative.
 Of course this is not at all the best way to do so when it is only the
 derivative, and not the process, that is important.
 Maxima provides a single differentiation command, 
\family typewriter
diff()
\family default
, that computes derivatives in a much more efficient manner.
 The arguments to diff() are the expression to be differentiated, the variable
 with respect to which to differentiate, and optionally, a positive integer
 indicating how many times to differentiate with respect to that variable.
 More than one variable/number pair may be specified to compute mixed partial
 derivatives.
 Maxima makes no distinction between derivatives and partial derivatives.
 
\end_layout

\begin_layout LyX-Code
(%i1) diff(%e^sqrt(sin(x)),x);
\end_layout

\begin_layout LyX-Code
                                      sqrt(sin(x))
\end_layout

\begin_layout LyX-Code
                             cos(x) %e
\end_layout

\begin_layout LyX-Code
(%o1)                        ---------------------
\end_layout

\begin_layout LyX-Code
                                2 sqrt(sin(x))
\end_layout

\begin_layout LyX-Code
(%i2) diff(f(x)/g(x),x);
\end_layout

\begin_layout LyX-Code
                         d                 d
\end_layout

\begin_layout LyX-Code
                         -- (f(x))   f(x) (-- (g(x)))
\end_layout

\begin_layout LyX-Code
                         dx                dx
\end_layout

\begin_layout LyX-Code
(%o2)                    --------- - ----------------
\end_layout

\begin_layout LyX-Code
                           g(x)            2
\end_layout

\begin_layout LyX-Code
                                          g (x)
\end_layout

\begin_layout LyX-Code
(%i3) f(x):=sin(x)$
\end_layout

\begin_layout LyX-Code
      diff(f(x)/g(x),x);
\end_layout

\begin_layout LyX-Code
      ratsimp(%);
\end_layout

\begin_layout LyX-Code
                                           d
\end_layout

\begin_layout LyX-Code
                                   sin(x) (-- (g(x)))
\end_layout

\begin_layout LyX-Code
                          cos(x)           dx
\end_layout

\begin_layout LyX-Code
(%o4)                     ------ - ------------------
\end_layout

\begin_layout LyX-Code
                           g(x)           2
\end_layout

\begin_layout LyX-Code
                                         g (x)
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                d
\end_layout

\begin_layout LyX-Code
                        sin(x) (-- (g(x))) - g(x) cos(x)
\end_layout

\begin_layout LyX-Code
                                dx
\end_layout

\begin_layout LyX-Code
(%o5)                 - --------------------------------
\end_layout

\begin_layout LyX-Code
                                      2
\end_layout

\begin_layout LyX-Code
                                     g (x)
\end_layout

\begin_layout LyX-Code
(%i6) f(x,y,z):=x^2*y^3*z^4$
\end_layout

\begin_layout LyX-Code
      diff(f(x,y,z),x,1,z,2);
\end_layout

\begin_layout LyX-Code
                                        3  2
\end_layout

\begin_layout LyX-Code
(%o7)                             24 x y  z
\end_layout

\begin_layout Subsection
Example (related rates)
\end_layout

\begin_layout Standard
A spherical balloon is releasing air in such a way that at the time its
 radius is 6 inches, its volume is decreasing at a rate of 3 cubic inches
 per second.
 At what rate is its radius decreasing at this time? 
\end_layout

\begin_layout LyX-Code
(%i1) eqn:V(t)=4/3*%pi*r(t)^3;
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                            3
\end_layout

\begin_layout LyX-Code
                                     4 %pi r (t)
\end_layout

\begin_layout LyX-Code
(%o1)                         V(t) = -----------
\end_layout

\begin_layout LyX-Code
                                          3
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i2) diff(eqn,t);
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout LyX-Code
                      d                  2     d
\end_layout

\begin_layout LyX-Code
(%o2)                 -- (V(t)) = 4 %pi r (t) (-- (r(t)))
\end_layout

\begin_layout LyX-Code
                      dt                       dt
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i3) ev(%,diff(r(t),t)=drdt,diff(V(t),t)=-3,r(t)=6);
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%o3)                         - 3 = 144 %pi drdt
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i4) solve(%);
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                           1
\end_layout

\begin_layout LyX-Code
(%o4)                          [drdt = - ------]
\end_layout

\begin_layout LyX-Code
                                         48 %pi
\end_layout

\begin_layout Standard
Its radius is decreasing at 
\begin_inset Formula ${\displaystyle \frac{1}{48\pi}}$
\end_inset

 inches per second.
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent

\series bold
NOTE
\series default
: In 
\family typewriter
(%i3)
\family default
, the substitution 
\family typewriter
diff(r(t),t)=drdt
\family default
 is necessary to prevent 
\family typewriter
diff(r(t),t)
\family default
 from evaluating to zero when the substitution 
\family typewriter
r(t)=2
\family default
 is made.
 Along these same lines, the order in which these substitutions is listed,
 relative to one another, in 
\family typewriter
(%i3)
\family default
 is critical.
 The 
\family typewriter
ev()
\family default
 command 
\end_layout

\begin_layout LyX-Code
(%i3) ev(%,diff(V(t),t)=-3,r(t)=6,diff(r(t),t)=drdt);
\end_layout

\begin_layout Standard
would result in the equation 
\family typewriter
-3=0
\family default
 because 
\family typewriter
diff(r(t),t)
\family default
 will have already been evaluated to zero by the time the substitution 
\family typewriter
diff(r(t),t)=drdt
\family default
 is considered.
\end_layout

\begin_layout Subsection
Example(optimization)
\end_layout

\begin_layout Standard
A cylindrical can with a bottom but no lid is to be made out of 
\begin_inset Formula $300\pi$
\end_inset

 cm
\begin_inset Formula $^{2}$
\end_inset

 of sheet metal.
 Find the maximum volume of such a can.
 
\end_layout

\begin_layout LyX-Code
(%i23) Vol(r,h):=%pi*r^2*h;
\end_layout

\begin_layout LyX-Code
                                               2
\end_layout

\begin_layout LyX-Code
(%o23)                       Vol(r, h) := %pi r  h
\end_layout

\begin_layout LyX-Code
(%i24) SA(r,h):=%pi*r^2+2*%pi*r*h;
\end_layout

\begin_layout LyX-Code
                                         2
\end_layout

\begin_layout LyX-Code
(%o24)                  SA(r, h) := %pi r  + 2 %pi r h
\end_layout

\begin_layout LyX-Code
(%i25) solve(SA(r,h)=300*%pi,h);
\end_layout

\begin_layout LyX-Code
                                       2
\end_layout

\begin_layout LyX-Code
                                      r  - 300
\end_layout

\begin_layout LyX-Code
(%o25)                         [h = - --------]
\end_layout

\begin_layout LyX-Code
                                        2 r
\end_layout

\begin_layout LyX-Code
(%i26) V:ev(Vol(r,h),%[1]);
\end_layout

\begin_layout LyX-Code
                                        2
\end_layout

\begin_layout LyX-Code
                                %pi r (r  - 300)
\end_layout

\begin_layout LyX-Code
(%o26)                        - ----------------
\end_layout

\begin_layout LyX-Code
                                       2
\end_layout

\begin_layout LyX-Code
(%i27) eqn:diff(V,r)=0;
\end_layout

\begin_layout LyX-Code
                                          2
\end_layout

\begin_layout LyX-Code
                                2   %pi (r  - 300)
\end_layout

\begin_layout LyX-Code
(%o27)                   - %pi r  - -------------- = 0
\end_layout

\begin_layout LyX-Code
                                          2
\end_layout

\begin_layout LyX-Code
(%i28) critical:solve(eqn);
\end_layout

\begin_layout LyX-Code
(%o28)                        [r = - 10, r = 10]
\end_layout

\begin_layout LyX-Code
(%i29) ev(V,critical[2]);
\end_layout

\begin_layout LyX-Code
(%o29)                             1000 %pi
\end_layout

\begin_layout Standard
\begin_inset Formula $1000\pi$
\end_inset

 cm
\begin_inset Formula $^{3}$
\end_inset

.
\end_layout

\begin_layout Subsection
Example (second derivative test)
\end_layout

\begin_layout Standard
Use the second derivative test to find the relative extrema of 
\begin_inset Formula $f(x)=\sec x$
\end_inset

 on 
\begin_inset Formula $(-\pi/2,\pi/2)$
\end_inset

.
 
\end_layout

\begin_layout LyX-Code
(%i1) f(x):=sec(x);
\end_layout

\begin_layout LyX-Code
      first:diff(f(x),x);
\end_layout

\begin_layout LyX-Code
      second:diff(f(x),x,2);
\end_layout

\begin_layout LyX-Code
      critical:solve(first=0);
\end_layout

\begin_layout LyX-Code
(%o1)                           f(x) := sec(x)
\end_layout

\begin_layout LyX-Code
(%o2)                            sec(x) tan(x)
\end_layout

\begin_layout LyX-Code
                                     2         3
\end_layout

\begin_layout LyX-Code
(%o3)                      sec(x) tan (x) + sec (x)
\end_layout

\begin_layout LyX-Code
`solve' is using arc-trig functions to get a solution.Some solutions will
 be lost.
\end_layout

\begin_layout LyX-Code
(%o4)                        [x = 0, x = asec(0)]
\end_layout

\begin_layout LyX-Code
(%i5) ev(second,critical[1]);
\end_layout

\begin_layout LyX-Code
      ev(f(x),critical[1]);
\end_layout

\begin_layout LyX-Code
(%o5)                                  1
\end_layout

\begin_layout LyX-Code
(%o6)                                  1
\end_layout

\begin_layout Standard
\begin_inset Formula $(0,1)$
\end_inset

 is a local minimum.
\end_layout

\begin_layout Section
Integration
\end_layout

\begin_layout Subsection
Riemann Sums
\end_layout

\begin_layout Standard
Perhaps the most tedious part of learning the calculus is computing Riemann
 sums.
 Here is a fantastic opportunity to involve the computer.
 After all, computers are much more adept at tedious computation than we
 are.
 Consider the following two methods for computing a Riemann sum using Maxima.
 The first method is very utilitarian.
 It gets the job done, but doesn't do a very good job of illustration.
 
\end_layout

\begin_layout LyX-Code
(%i1) fpprintprec:5$
\end_layout

\begin_layout LyX-Code
      f(x):=1+3*cos(x)^2/(x+5);
\end_layout

\begin_layout LyX-Code
      a:2$
\end_layout

\begin_layout LyX-Code
      b:4$
\end_layout

\begin_layout LyX-Code
      n:12$
\end_layout

\begin_layout LyX-Code
      rightsum:ev(sum((b-a)/n*f(a+i*(b-a)/n),i,1,n),numer);
\end_layout

\begin_layout LyX-Code
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout LyX-Code
                                              2
\end_layout

\begin_layout LyX-Code
                                         3 cos (x)
\end_layout

\begin_layout LyX-Code
(%o2)                        f(x) := 1 + ---------
\end_layout

\begin_layout LyX-Code
                                           x + 5
\end_layout

\begin_layout LyX-Code
(%o6)                               2.5392
\end_layout

\begin_layout Standard
This second method does a much better job of illustrating the area computation.
 It uses the package 
\family typewriter
draw
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
package!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{draw}
\end_layout

\end_inset


\end_layout

\end_inset

 to take care of the graphics.
 To load package draw, include the line 
\end_layout

\begin_layout LyX-Code
load(draw);
\end_layout

\begin_layout Standard
somewhere before the graphics are needed.
 The results of the following code are shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Rieman-Sum"

\end_inset

.
\end_layout

\begin_layout LyX-Code
(%i322) fpprintprec:5$
\end_layout

\begin_layout LyX-Code
        f(x):=1+3*cos(x)^2/(x+5);
\end_layout

\begin_layout LyX-Code
        a:2$
\end_layout

\begin_layout LyX-Code
        b:4$
\end_layout

\begin_layout LyX-Code
        n:12$
\end_layout

\begin_layout LyX-Code
        print(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

Left endpoints:
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

)$
\end_layout

\begin_layout LyX-Code
        leftend:makelist(a+i*(b-a)/n,i,0,n-1);
\end_layout

\begin_layout LyX-Code
        print(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

Right endpoints:
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

)$
\end_layout

\begin_layout LyX-Code
        rightend:makelist(a+i*(b-a)/n,i,1,n);
\end_layout

\begin_layout LyX-Code
        print(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

Heights:
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

)$
\end_layout

\begin_layout LyX-Code
        height:makelist(ev(f(leftend[i]),numer),i,1,n);
\end_layout

\begin_layout LyX-Code
        area:sum((rightend[i]-leftend[i])*height[i],i,1,n)$
\end_layout

\begin_layout LyX-Code
        print(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

Riemann sum =
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

,area)$
\end_layout

\begin_layout LyX-Code
        /* Create and display graphics */
\end_layout

\begin_layout LyX-Code
        rects:makelist(rectangle([leftend[i],0],[rightend[i],height[i]]),i,1,n)$
\end_layout

\begin_layout LyX-Code
        graph:[explicit(f(x),x,a-(b-a)/12,b+(b-a)/12)]$
\end_layout

\begin_layout LyX-Code
        options:[yrange=[0,2]]$
\end_layout

\begin_layout LyX-Code
        scene:append(options,rects,graph)$
\end_layout

\begin_layout LyX-Code
        apply(draw2d,scene)$
\end_layout

\begin_layout LyX-Code
                                              2
\end_layout

\begin_layout LyX-Code
                                         3 cos (x)
\end_layout

\begin_layout LyX-Code
(%o323)                      f(x) := 1 + ---------
\end_layout

\begin_layout LyX-Code
                                           x + 5
\end_layout

\begin_layout LyX-Code
Left endpoints:
\end_layout

\begin_layout LyX-Code
                      13  7  5  8  17     19  10  7  11 23
\end_layout

\begin_layout LyX-Code
(%o328)           [2, --, -, -, -, --, 3, --, --, -, --, --]
\end_layout

\begin_layout LyX-Code
                      6   3  2  3  6      6   3   2  3   6
\end_layout

\begin_layout LyX-Code
Right endpoints:
\end_layout

\begin_layout LyX-Code
                   13  7  5  8  17     19  10  7  11  23
\end_layout

\begin_layout LyX-Code
(%o330)           [--, -, -, -, --, 3, --, --, -, --, --, 4]
\end_layout

\begin_layout LyX-Code
                   6   3  2  3  6      6   3   2  3   6
\end_layout

\begin_layout LyX-Code
Heights:
\end_layout

\begin_layout LyX-Code
(%o332) [1.0742, 1.1319, 1.1952, 1.2567, 1.3095, 1.3477, 1.3675, 1.3671,       
                                          1.3469, 1.3095, 1.2592, 1.2014]
\end_layout

\begin_layout LyX-Code
Riemann sum = 2.5278
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename riemann_sum.eps
	scale 50

\end_inset

 
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Rieman-Sum"

\end_inset

Rieman Sum
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Antiderivatives
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
antiderivatives
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To calculate the antiderivative of an expression, use the 
\family typewriter
integrate()
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
integration
\end_layout

\end_inset


\family default
 command.
 As might be expected, 
\family typewriter
integrate()
\family default
 takes the integrand, the variable against which to integrate, and limits
 of integration, if any, as its arguments.
 So, some typical examples of its usage are as follows.
\end_layout

\begin_layout LyX-Code
(%i5) 'integrate(x,x)=integrate(x,x);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{integrate()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                  /         2
\end_layout

\begin_layout LyX-Code
                                  [        x
\end_layout

\begin_layout LyX-Code
(%o5)                             I x dx = --
\end_layout

\begin_layout LyX-Code
                                  ]        2
\end_layout

\begin_layout LyX-Code
                                  /
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i7) 'integrate(exp(t),t,2,log(12))=integrate(exp(t),t,2,log(12))
\family typewriter

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{exp()}
\end_layout

\end_inset


\end_layout

\end_inset


\family default
;
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                           log(12)
\end_layout

\begin_layout LyX-Code
                          /
\end_layout

\begin_layout LyX-Code
                          [          t             2
\end_layout

\begin_layout LyX-Code
(%o7)                     I        %e  dt = 12 - %e
\end_layout

\begin_layout LyX-Code
                          ]
\end_layout

\begin_layout LyX-Code
                          /
\end_layout

\begin_layout LyX-Code
                           2
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i8) 'integrate(x^2*y-sqrt(x+y),y)=integrate(x^2*y-sqrt(x+y),y);
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
               /                            2  2            3/2
\end_layout

\begin_layout LyX-Code
               [   2                       x  y    2 (y + x)
\end_layout

\begin_layout LyX-Code
(%o8)          I (x  y - sqrt(y + x)) dy = ----- - ------------
\end_layout

\begin_layout LyX-Code
               ]                             2          3
\end_layout

\begin_layout LyX-Code
               /
\end_layout

\begin_layout Standard
Note that the constant of integration is not reported.
 Also note the use of the single quote before the 
\family typewriter
integrate()
\family default
 command
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
noun form
\end_layout

\end_inset

.
 This tells Maxima to simply display the integral instead of evaluate it,
 also known as the noun form.
 The single quote can be used before any command in order to suppress evaluation.
 Some more involved examples are given below.
\end_layout

\begin_layout Subsubsection
Trig substitution
\end_layout

\begin_layout Standard
Use trig substitution to evaluate 
\begin_inset Formula $\int_{0}^{1}t^{3}\sqrt{1+t^{2}}\, dt$
\end_inset

.
\end_layout

\begin_layout LyX-Code
(%i92) print("Maxima can simply integrate...")$
\end_layout

\begin_layout LyX-Code
       'integrate(t^3*sqrt(1+t^2),t,0,1)=integrate(t^3*sqrt(1+t^2),t,0,1);
\end_layout

\begin_layout LyX-Code
       print("...or Maxima can be used to illustrate the steps:")$
\end_layout

\begin_layout LyX-Code
       integrand:t^3*sqrt(1+t^2)$
\end_layout

\begin_layout LyX-Code
       subt:cos(h)$
\end_layout

\begin_layout LyX-Code
       subintegrand:ev(integrand,t=subt)*diff(subt,h)$
\end_layout

\begin_layout LyX-Code
       lower:ev(h,solve(subt=0))$
\end_layout

\begin_layout LyX-Code
       upper:ev(h,solve(subt=1))$
\end_layout

\begin_layout LyX-Code
       'integrate(integrand,t,0,1)='integrate(subintegrand,h,lower,upper);
\end_layout

\begin_layout LyX-Code
       print("which of course evaluates to")$
\end_layout

\begin_layout LyX-Code
       integrate(subintegrand,h,lower,upper);
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
Maxima can simply integrate...
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                      1
\end_layout

\begin_layout LyX-Code
                    /
\end_layout

\begin_layout LyX-Code
                    [   3       2           2 sqrt(2)   2
\end_layout

\begin_layout LyX-Code
(%o93)              I  t  sqrt(t  + 1) dt = --------- + --
\end_layout

\begin_layout LyX-Code
                    ]                          15       15
\end_layout

\begin_layout LyX-Code
                    /
\end_layout

\begin_layout LyX-Code
                     0
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
...or Maxima can be used to illustrate the steps:
\end_layout

\begin_layout LyX-Code
`solve' is using arc-trig functions to get a solution.Some solutions will
 be lost.
\end_layout

\begin_layout LyX-Code
`solve' is using arc-trig functions to get a solution.Some solutions will
 be lost.
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                 %pi
\end_layout

\begin_layout LyX-Code
                                 ---
\end_layout

\begin_layout LyX-Code
         1                        2
\end_layout

\begin_layout LyX-Code
        /                       /
\end_layout

\begin_layout LyX-Code
        [   3       2           [       3            2
\end_layout

\begin_layout LyX-Code
(%o100) I  t  sqrt(t  + 1) dt = I    cos (h) sqrt(cos (h) + 1) sin(h) dh
\end_layout

\begin_layout LyX-Code
        ]                       ]
\end_layout

\begin_layout LyX-Code
        /                       /
\end_layout

\begin_layout LyX-Code
         0                       0
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
which of course evaluates to
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                2 sqrt(2)   2
\end_layout

\begin_layout LyX-Code
(%o102)                         --------- + --
\end_layout

\begin_layout LyX-Code
                                   15       15
\end_layout

\begin_layout Subsubsection
Integration by parts
\end_layout

\begin_layout Standard
Use integration by parts to evaluate 
\begin_inset Formula $\int\sin(\log(x))\, dx$
\end_inset

.
\end_layout

\begin_layout LyX-Code
(%i1) u:sin(log(x))$
\end_layout

\begin_layout LyX-Code
      dv:1$ f(x):=u*dv$
\end_layout

\begin_layout LyX-Code
      'integrate(f(x),x);
\end_layout

\begin_layout LyX-Code
      integrate(f(x),x);
\end_layout

\begin_layout LyX-Code
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout LyX-Code
                               /
\end_layout

\begin_layout LyX-Code
                               [
\end_layout

\begin_layout LyX-Code
(%o4)                          I sin(log(x)) dx
\end_layout

\begin_layout LyX-Code
                               ]
\end_layout

\begin_layout LyX-Code
                               /
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                         x (sin(log(x)) - cos(log(x)))
\end_layout

\begin_layout LyX-Code
(%o5)                    -----------------------------
\end_layout

\begin_layout LyX-Code
                                       2
\end_layout

\begin_layout LyX-Code
(%i6) du:diff(u,x);
\end_layout

\begin_layout LyX-Code
      v:integrate(dv,x);
\end_layout

\begin_layout LyX-Code
                                  cos(log(x))
\end_layout

\begin_layout LyX-Code
(%o6)                             -----------
\end_layout

\begin_layout LyX-Code
                                       x
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%o7)                                  x
\end_layout

\begin_layout LyX-Code
(%i8) u*v-'integrate(v*du,x);
\end_layout

\begin_layout LyX-Code
      u*v-integrate(v*du,x);
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                       /
\end_layout

\begin_layout LyX-Code
                                       [
\end_layout

\begin_layout LyX-Code
(%o8)                  x sin(log(x)) - I cos(log(x)) dx
\end_layout

\begin_layout LyX-Code
                                       ]
\end_layout

\begin_layout LyX-Code
                                       /
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                 x (sin(log(x)) + cos(log(x)))
\end_layout

\begin_layout LyX-Code
(%o9)            x sin(log(x)) - -----------------------------
\end_layout

\begin_layout LyX-Code
                                               2
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i10) ev(equal(%o5,%o9),pred);
\end_layout

\begin_layout LyX-Code
(%o10)                               true
\end_layout

\begin_layout Subsubsection
Partial fractions
\end_layout

\begin_layout Standard
Maxima has a simple command for finding partial fraction decompositions
 aptly named 
\family typewriter
partfrac()
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
partial fractions
\end_layout

\end_inset

.
 If the fraction to decompose consists of only one variable, the command
 may be called in the form 
\end_layout

\begin_layout Standard
\align center

\family typewriter
partfrac(expression)
\family default
.
 
\end_layout

\begin_layout Standard
\noindent
But if there is more than one variable, the variable of interest must be
 specified as in 
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
partfrac(expression,variable)
\family default
.
 
\end_layout

\begin_layout Standard
\noindent
\align left
In the following example, Maxima decomposes 
\begin_inset Formula ${\displaystyle \frac{3n^{2}+2n}{n^{3}-3n^{2}+2n-6}}$
\end_inset

 (with respect to 
\begin_inset Formula $n$
\end_inset

) and 
\begin_inset Formula 
\[
\frac{2xy^{3}-2y^{3}+6x^{2}y^{2}+5xy^{2}-4x^{3}y-2x^{2}y-8x^{4}}{xy^{3}-x^{2}y^{2}-2x^{3}y}
\]

\end_inset

 with respect to 
\begin_inset Formula $x$
\end_inset

 and with respect to 
\begin_inset Formula $y$
\end_inset

.
\end_layout

\begin_layout LyX-Code
(%i27) numerator:3*n^2+2*n$
\end_layout

\begin_layout LyX-Code
       denominator:n^3-3*n^2+2*n-6$
\end_layout

\begin_layout LyX-Code
       numerator/denominator=partfrac(numerator/denominator);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{partfrac()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
       numerator:2*x*y^3-2*y^3+6*x^2*y^2+5*x*y^2-4*x^3*y-2*x^2*y-8*x^4$
\end_layout

\begin_layout LyX-Code
       denominator:x*y^3-x^2*y^2-2*x^3*y$
\end_layout

\begin_layout LyX-Code
       numerator/denominator; print("equals")$
\end_layout

\begin_layout LyX-Code
       partfrac(numerator/denominator,x);
\end_layout

\begin_layout LyX-Code
       print("equals")$
\end_layout

\begin_layout LyX-Code
       partfrac(numerator/denominator,y);
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                            2
\end_layout

\begin_layout LyX-Code
                         3 n  + 2 n          2        3
\end_layout

\begin_layout LyX-Code
(%o29)               ------------------- = ------ + -----
\end_layout

\begin_layout LyX-Code
                      3      2              2       n - 3
\end_layout

\begin_layout LyX-Code
                     n  - 3 n  + 2 n - 6   n  + 2
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                3      3      2  2        2      3        2        4
\end_layout

\begin_layout LyX-Code
           2 x y  - 2 y  + 6 x  y  + 5 x y  - 4 x  y - 2 x  y - 8 x
\end_layout

\begin_layout LyX-Code
(%o32)     ---------------------------------------------------------
\end_layout

\begin_layout LyX-Code
                                3    2  2      3
\end_layout

\begin_layout LyX-Code
                             x y  - x  y  - 2 x  y
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
equals
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                             3       2 y     4 x   2
\end_layout

\begin_layout LyX-Code
(%o34)                     ----- - ------- + --- - -
\end_layout

\begin_layout LyX-Code
                           y + x   2 x - y    y    x
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
equals
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                          3       4 x     4 x   2 x - 2
\end_layout

\begin_layout LyX-Code
(%o36)                  ----- + ------- + --- + -------
\end_layout

\begin_layout LyX-Code
                        y + x   y - 2 x    y       x
\end_layout

\begin_layout Subsubsection
Multiple integrals
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
integration!multiple
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Multiple integrals are evaluated using multiple calls to the 
\family typewriter
integrate()
\family default
 function.
 The calls may be nested as the example illustrates in calculating
\begin_inset Formula 
\[
\int_{0}^{1}\int_{0}^{2x}ye^{x^{3}}\, dy\, dx
\]

\end_inset


\end_layout

\begin_layout LyX-Code
(%i17) print("Maxima can handle nested integrate() commands.")$
\end_layout

\begin_layout LyX-Code
       exmpl:'integrate('integrate(y*exp(x^3),y,0,2*x),x,0,1)$
\family typewriter

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{exp()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
       exmpl=ev(exmpl,nouns);
\end_layout

\begin_layout LyX-Code
       print("For clarity, however, it may be simpler to use separate commands:"
)$
\end_layout

\begin_layout LyX-Code
       inner:integrate(y*exp(x^3),y,0,2*x)$
\end_layout

\begin_layout LyX-Code
       intermediate:'integrate(inner,x,0,1)$
\end_layout

\begin_layout LyX-Code
       print(exmpl,"=",intermediate,"=",ev(intermediate,nouns))$
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
Maxima can handle nested integrate() commands.
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                         1       2 x
\end_layout

\begin_layout LyX-Code
                       /     3 /
\end_layout

\begin_layout LyX-Code
                       [    x  [                 %e   1
\end_layout

\begin_layout LyX-Code
(%o19)                 I  %e   I    y dy dx = 2 (-- - -)
\end_layout

\begin_layout LyX-Code
                       ]       ]                 3    3
\end_layout

\begin_layout LyX-Code
                       /       /
\end_layout

\begin_layout LyX-Code
                        0       0
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
For clarity, however, it may be simpler to use separate commands:
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
  1       2 x             1
\end_layout

\begin_layout LyX-Code
 /     3 /                /        3
\end_layout

\begin_layout LyX-Code
 [    x  [                [   2   x          %e   1
\end_layout

\begin_layout LyX-Code
 I  %e   I    y dy dx = 2 I  x  %e   dx = 2 (-- - -)
\end_layout

\begin_layout LyX-Code
 ]       ]                ]                  3    3
\end_layout

\begin_layout LyX-Code
 /       /                /
\end_layout

\begin_layout LyX-Code
 0       0                0
\end_layout

\begin_layout Section
Series
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
series
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Scalar Series
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
series!scalar
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sums of scalars can be calculated using the 
\family typewriter
sum()
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sum
\end_layout

\end_inset

 command.
 The 
\family typewriter
sum()
\family default
 command requires a formula for the summands, the variable with respect
 to which the sum is to be calculated, a lower limit, and an upper limit
 as arguments.
 The upper limit may be 
\begin_inset Formula $\infty$
\end_inset

, but there is no guarantee Maxima will be able to evaluate any given infinite
 series.
 Infinity
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
infinity
\end_layout

\end_inset

 is denoted by 
\family typewriter
inf
\family default
 in Maxima.
 As a first example, the sum
\begin_inset Formula 
\[
\sum_{i=1}^{3}i
\]

\end_inset

would be written 
\family typewriter
sum(i,i,1,3)
\family default
, as shown below.
 The first 
\family typewriter
i
\family default
 is the formula and the second 
\family typewriter
i
\family default
 indicates the variable whose limits are 1 and 3.
\end_layout

\begin_layout LyX-Code
(%i127) sum(i,i,1,3);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{sum()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
(%o127)                                6
\end_layout

\begin_layout Standard
When the limits of the summation are specific integers, as above, the default
 action is to evaluate the limit.
 However, when either one of the limits is variable or infinity, the default
 action is to return the noun form.
 To force an evaluation of the sum, use the 
\family typewriter
ev(
\begin_inset Formula $\cdot$
\end_inset

,simpsum)
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{ev($
\backslash
cdot$,simpsum)}
\end_layout

\end_inset


\end_layout

\end_inset

 command.
\end_layout

\begin_layout LyX-Code
(%i129) sum(i,i,1,n);
\end_layout

\begin_layout LyX-Code
        ev(%,simpsum);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{ev($
\backslash
cdot$,simpsum)}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
                                     n
\end_layout

\begin_layout LyX-Code
                                    ====
\end_layout

\begin_layout LyX-Code
                                    
\backslash

\end_layout

\begin_layout LyX-Code
(%o129)                              >    i
\end_layout

\begin_layout LyX-Code
                                    /
\end_layout

\begin_layout LyX-Code
                                    ====
\end_layout

\begin_layout LyX-Code
                                    i = 1
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                     2
\end_layout

\begin_layout LyX-Code
                                    n  + n
\end_layout

\begin_layout LyX-Code
(%o130)                             ------
\end_layout

\begin_layout LyX-Code
                                      2
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i140) exmpl:6*sum(1/i^2,i,1,inf)$
\family typewriter

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

command!
\backslash
texttt{sum}
\end_layout

\end_inset


\end_layout

\end_inset


\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{inf}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sum!infinite
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
        exmpl=ev(exmpl,simpsum);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{ev($
\backslash
cdot$,simpsum)}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                 inf
\end_layout

\begin_layout LyX-Code
                                 ====
\end_layout

\begin_layout LyX-Code
                                 
\backslash
     1       2
\end_layout

\begin_layout LyX-Code
(%o141)                        6  >    -- = %pi
\end_layout

\begin_layout LyX-Code
                                 /      2
\end_layout

\begin_layout LyX-Code
                                 ====  i
\end_layout

\begin_layout LyX-Code
                                 i = 1
\end_layout

\begin_layout Standard
Of course Maxima can handle much more complicated sums such as this one
 of Ramanujan's
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Ramanujan
\end_layout

\end_inset

 (to a finite number of terms):
\begin_inset Formula 
\[
\frac{1}{\pi}=\frac{\sqrt{8}}{9801}\sum_{n=0}^{\infty}\frac{(4n)!(1103+26390n)}{(n!)^{4}\cdot396^{4n}}
\]

\end_inset


\end_layout

\begin_layout LyX-Code
(%i25) fpprec:60$
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{fpprec}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
       total:sqrt(8)/9801*'sum(((4*n)!*(1103+26390*n))/((n!)^4*396^(4*n)),n,0,6)
$
\end_layout

\begin_layout LyX-Code
       reciprocalNoun:1/total$
\end_layout

\begin_layout LyX-Code
       reciprocalEv:ev(reciprocalNoun,nouns)$
\end_layout

\begin_layout LyX-Code
       print(reciprocalNoun)$ print("     equals")$
\end_layout

\begin_layout LyX-Code
       print(reciprocalEv)$ print("     which is approximately")$
\end_layout

\begin_layout LyX-Code
       print(bfloat(reciprocalEv))$ print("     pi is approximately")$
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{bfloat()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
       print(bfloat(%pi))$
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                  9801
\end_layout

\begin_layout LyX-Code
 -----------------------------------------
\end_layout

\begin_layout LyX-Code
              6
\end_layout

\begin_layout LyX-Code
            ====
\end_layout

\begin_layout LyX-Code
            
\backslash
     (26390 n + 1103) (4 n)!
\end_layout

\begin_layout LyX-Code
(2 sqrt(2))  >    -----------------------
\end_layout

\begin_layout LyX-Code
            /              4 n   4
\end_layout

\begin_layout LyX-Code
            ====        396    n!
\end_layout

\begin_layout LyX-Code
            n = 0
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
    equals
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
   15549520527125399719943002030279050539454438618110698369056768
\end_layout

\begin_layout LyX-Code
---------------------------------------------------------------------
\end_layout

\begin_layout LyX-Code
3499871759747710499842768988784507373816789022688631739047925 sqrt(2)
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
    which is approximately
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
3.14159265358979323846264338327950288419716939937510582102093b0
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
     pi is approximately
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
3.14159265358979323846264338327950288419716939937510582097494b0
\end_layout

\begin_layout Subsection
Taylor Series
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
series!Taylor
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Maxima has two commands for calculating Taylor Series: one for computing
 the first several terms, 
\family typewriter
taylor()
\family default
, and one for determining a summation formula, 
\family typewriter
powerseries()
\family default
.
 Each command takes an expression (function), the variable of expansion,
 and a point about which to expand as arguments.
 Additionally, the 
\family typewriter
taylor()
\family default
 command requires the number of terms to compute.
\end_layout

\begin_layout LyX-Code
(%i54) fn:1/(1-x)^2$
\end_layout

\begin_layout LyX-Code
       taylor(fn,x,0,8);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{taylor()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
       niceindices(powerseries(fn,x,0));
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{powerseries()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{niceindices()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                       2      3      4      5      6      7      8
\end_layout

\begin_layout LyX-Code
(%o55)/T/ 1 + 2 x + 3 x  + 4 x  + 5 x  + 6 x  + 7 x  + 8 x  + 9 x  + .
 .
 .
\end_layout

\begin_layout LyX-Code
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout LyX-Code
                               inf
\end_layout

\begin_layout LyX-Code
                               ====
\end_layout

\begin_layout LyX-Code
                               
\backslash
              i
\end_layout

\begin_layout LyX-Code
(%o56)                          >    (i + 1) x 
\end_layout

\begin_layout LyX-Code
                               /
\end_layout

\begin_layout LyX-Code
                               ====
\end_layout

\begin_layout LyX-Code
                               i = 0
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i57) fn:atan(x)$
\end_layout

\begin_layout LyX-Code
       taylor(fn,x,0,8);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{taylor()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
       niceindices(powerseries(fn,x,0));
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{powerseries()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{niceindices()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                3    5    7
\end_layout

\begin_layout LyX-Code
                               x    x    x
\end_layout

\begin_layout LyX-Code
(%o58)/T/                  x - -- + -- - -- + .
 .
 .
\end_layout

\begin_layout LyX-Code
                               3    5    7
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                             inf
\end_layout

\begin_layout LyX-Code
                             ====       i  2 i + 1
\end_layout

\begin_layout LyX-Code
                             
\backslash
     (- 1)  x
\end_layout

\begin_layout LyX-Code
(%o59)                        >    ---------------
\end_layout

\begin_layout LyX-Code
                             /         2 i + 1
\end_layout

\begin_layout LyX-Code
                             ====
\end_layout

\begin_layout LyX-Code
                             i = 0
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i60) fn:exp(x^2)$
\family typewriter

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{exp()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
       taylor(fn,x,0,8);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{taylor()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
       niceindices(powerseries(fn,x,0));
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{powerseries()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{niceindices()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                   4    6    8
\end_layout

\begin_layout LyX-Code
                              2   x    x    x
\end_layout

\begin_layout LyX-Code
(%o61)/T/                1 + x  + -- + -- + -- + .
 .
 .
\end_layout

\begin_layout LyX-Code
                                  2    6    24
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                  inf
\end_layout

\begin_layout LyX-Code
                                  ====   2 i
\end_layout

\begin_layout LyX-Code
                                  
\backslash
     x
\end_layout

\begin_layout LyX-Code
(%o62)                             >    ----
\end_layout

\begin_layout LyX-Code
                                  /      i!
\end_layout

\begin_layout LyX-Code
                                  ====
\end_layout

\begin_layout LyX-Code
                                  i = 0
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i69) fn:cos(sin(x))$
\end_layout

\begin_layout LyX-Code
       taylor(fn,x,0,8);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{taylor()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
       niceindices(powerseries(fn,x,0));
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{powerseries()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{niceindices()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                         2      4       6        8
\end_layout

\begin_layout LyX-Code
                        x    5 x    37 x    457 x
\end_layout

\begin_layout LyX-Code
(%o70)/T/           1 - -- + ---- - ----- + ------ + .
 .
 .
\end_layout

\begin_layout LyX-Code
                        2     24     720    40320
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%o71)                         Unable to expand
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i39) fn:sin(x)$
\end_layout

\begin_layout LyX-Code
       taylor(fn,x,%pi/2,8);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{taylor()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
       niceindices(powerseries(fn,x,%pi/2));
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{powerseries()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{niceindices()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                   %pi 2        %pi 4        %pi 6        %pi 8
\end_layout

\begin_layout LyX-Code
              (x - ---)    (x - ---)    (x - ---)    (x - ---)
\end_layout

\begin_layout LyX-Code
                    2            2            2            2
\end_layout

\begin_layout LyX-Code
(%o40)/T/ 1 - ---------- + ---------- - ---------- + ---------- + .
 .
 .
\end_layout

\begin_layout LyX-Code
                  2            24          720         40320
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                           inf        i      %pi 2 i
\end_layout

\begin_layout LyX-Code
                           ====  (- 1)  (x - ---)
\end_layout

\begin_layout LyX-Code
                           
\backslash
                  2
\end_layout

\begin_layout LyX-Code
(%o41)                      >    -------------------
\end_layout

\begin_layout LyX-Code
                           /           (2 i)!
\end_layout

\begin_layout LyX-Code
                           ====
\end_layout

\begin_layout LyX-Code
                           i = 0
\end_layout

\begin_layout Section
Vector Calculus
\end_layout

\begin_layout Subsection
Package vect
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
package!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{vect}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Vectors in Maxima are denoted by enclosure in square brackets, 
\family typewriter
[]
\family default
.
 Basic manipulations such as the sum and difference and scalar multiplication
 of vectors are part of the standard library.
 The magnitude of a vector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
vector!magnitude
\end_layout

\end_inset

 is not defined, so a useful definition to make is 
\end_layout

\begin_layout LyX-Code
Norm(a):=sqrt(a.conjugate(a));
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

command!
\backslash
texttt{Norm()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
for calculating magnitudes.
 This definition will work for vectors of both real and imaginary quantities.
 Common vector calculus manipulations are not part of the standard library
 either.
 They are included in the 
\family typewriter
vect
\family default
 package.
 To use 
\family typewriter
vect
\family default
, put the line 
\end_layout

\begin_layout LyX-Code
load(vect);
\end_layout

\begin_layout Standard
at some point before the vector calculus is needed.
\end_layout

\begin_layout Standard
Package 
\family typewriter
vect
\family default
 supplies vector calculus functions such as 
\family typewriter
div
\family default
, 
\family typewriter
grad
\family default
, 
\family typewriter
curl
\family default
, 
\family typewriter
Laplacian
\family default
, dot product (
\family typewriter
.
\family default
) and cross product (
\family typewriter
~
\family default
).
 It (re)defines the dot product to be commutative.
 The default form for all functions except the dot product is the noun form
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
noun form
\end_layout

\end_inset

.
 This means they will simply be regurgitated as inputted.
 They will not be evaluated unless explicitly forced.
 Therefore it is useful to define the generic evaluation function 
\end_layout

\begin_layout LyX-Code
evalV(v):=ev(express(v),nouns);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{ev($
\backslash
cdot$,nouns)}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{evalV()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
for use when evaluation is required.
 
\family typewriter
express(v)
\family default
 alone is also sometimes useful.
 Try it out to see what it does.
\end_layout

\begin_layout Standard
The default coordinate system is the Cartesian coordinate system in the
 three variables 
\begin_inset Formula $x,y,z$
\end_inset

, and affects 
\family typewriter
grad
\family default
, 
\family typewriter
div
\family default
, 
\family typewriter
curl
\family default
, and 
\family typewriter
Laplacian
\family default
.
 Hence, 
\begin_inset Formula $\mbox{grad}(t^{2}-6s^{3})$
\end_inset

 will evaluate to 
\begin_inset Formula $[0,0,0]$
\end_inset

 and 
\begin_inset Formula $\mbox{grad}(x^{3}-3y^{2})$
\end_inset

 will evaluate to 
\begin_inset Formula $[3x^{2},-6y,0]$
\end_inset

 by default.
 To access
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
vector!access single component
\end_layout

\end_inset

 a particular component of a vector, follow the vector with the index of
 the component (starting with 1 for the first component) in square brackets.
 
\end_layout

\begin_layout LyX-Code
(%i1) evalV(grad(t^2-6*s^3));
\end_layout

\begin_layout LyX-Code
(%o1) [0,0,0]
\end_layout

\begin_layout LyX-Code
(%i2) evalV(grad(x^3-3*y^2));
\end_layout

\begin_layout LyX-Code
(%o2) [3x^2,-6y,0]
\end_layout

\begin_layout LyX-Code
(%i3) %[2];
\end_layout

\begin_layout LyX-Code
(%o3) -6y
\end_layout

\begin_layout Standard
To change the coordinate system, use the 
\family typewriter
scalefactors()
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{scalefactors()}
\end_layout

\end_inset


\end_layout

\end_inset

 command.
 For example, to work in 
\begin_inset Formula $\mathbb{R}^{2}$
\end_inset

 with independent variables 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

, use the command 
\family typewriter
scalefactors([[x,y],x,y])
\family default
.
 To work in elliptical coordinates 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

, use 
\family typewriter
scalefactors([[(u^2-v^2)/2,u*v],u,v])
\family default
.
\end_layout

\begin_layout Subsubsection

\family typewriter
u~v
\end_layout

\begin_layout Standard
Returns the cross product
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
product!cross
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
cross product|see
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

product, cross
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

 of vectors 
\family typewriter
u
\family default
 and 
\family typewriter
v
\family default
.
\end_layout

\begin_layout Subsubsection

\family typewriter
u.v
\end_layout

\begin_layout Standard
Returns the dot product
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
product!dot
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dot product|see
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

product, dot
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

 of vectors 
\family typewriter
u
\family default
 and 
\family typewriter
v
\family default
.
\end_layout

\begin_layout Subsubsection

\family typewriter
grad(f)
\end_layout

\begin_layout Standard
Returns the gradient
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gradient
\end_layout

\end_inset

 of function 
\family typewriter
f
\family default
.
\end_layout

\begin_layout Subsubsection

\family typewriter
laplacian(f)
\end_layout

\begin_layout Standard
Returns the Laplacian
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Laplacian
\end_layout

\end_inset

 of function 
\family typewriter
f
\family default
.
\end_layout

\begin_layout Subsubsection

\family typewriter
div(F)
\end_layout

\begin_layout Standard
Returns the divergence
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
divergence
\end_layout

\end_inset

 of vector field 
\family typewriter
F
\family default
.
\end_layout

\begin_layout Subsubsection

\family typewriter
curl(F)
\end_layout

\begin_layout Standard
Returns the curl
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
curl
\end_layout

\end_inset

 of vector field 
\family typewriter
F
\family default
.
\end_layout

\begin_layout Subsection
Example (Optimization)
\end_layout

\begin_layout Standard
Find the maximum and minimum values of 
\begin_inset Formula $f(x,y)=3x-4y$
\end_inset

 subject to the constraint 
\begin_inset Formula $x^{2}+2y=1$
\end_inset

.
 
\end_layout

\begin_layout LyX-Code
(%i1)   f(x,y):=3*x-4*y;
\end_layout

\begin_layout LyX-Code
        constraint:x^2+2*y=1;
\end_layout

\begin_layout LyX-Code
        subfory:solve(constraint,y);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{solve()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
        fofx:ev(f(x,y),subfory);
\end_layout

\begin_layout LyX-Code
        eqn:diff(fofx,x)=0;
\end_layout

\begin_layout LyX-Code
        criticalx:solve(eqn);
\end_layout

\begin_layout LyX-Code
        criticaly:ev(subfory,criticalx[1]);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{ev($
\backslash
cdot$,$equations$)}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
        extreme:ev(f(x,y),criticalx,criticaly);
\end_layout

\begin_layout LyX-Code
        testpoint:f(0,0);
\end_layout

\begin_layout LyX-Code
        print(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

Since
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

,testpoint,
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

>
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

,extreme,
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

,
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

,extreme,
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

is the minimum value.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

)$
\end_layout

\begin_layout LyX-Code
        print(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

There is no maximum value.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textquotedbl
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

)$
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%o1)                      f(x, y) := 3 x - 4 y
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                      2
\end_layout

\begin_layout LyX-Code
(%o2)                          2 y + x  = 1
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                       2
\end_layout

\begin_layout LyX-Code
                                     x  - 1
\end_layout

\begin_layout LyX-Code
(%o3)                         [y = - ------]
\end_layout

\begin_layout LyX-Code
                                        2
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                  2
\end_layout

\begin_layout LyX-Code
(%o4)                        2 (x  - 1) + 3 x
\end_layout

\begin_layout LyX-Code
(%o5)                           4 x + 3 = 0
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                        3
\end_layout

\begin_layout LyX-Code
(%o6)                            [x = - -]
\end_layout

\begin_layout LyX-Code
                                        4
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                      7
\end_layout

\begin_layout LyX-Code
(%o7)                            [y = --]
\end_layout

\begin_layout LyX-Code
                                      32
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                                     25
\end_layout

\begin_layout LyX-Code
(%o8)                              - --
\end_layout

\begin_layout LyX-Code
                                     8
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%o9)                                0
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
            25     25
\end_layout

\begin_layout LyX-Code
Since 0 > - -- , - -- is the minimum value.
\end_layout

\begin_layout LyX-Code
            8      8
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
There is no maximum value.
 
\end_layout

\begin_layout Subsection
Example (Lagrange multiplier)
\end_layout

\begin_layout Standard
Find the maximum and minimum values of 
\begin_inset Formula $f(x,y)=2x+y$
\end_inset

 subject to the constraint 
\begin_inset Formula $x^{2}+y^{2}=1$
\end_inset

.
 
\end_layout

\begin_layout LyX-Code
(%i1)   f(x,y):=2*x+y;
\end_layout

\begin_layout LyX-Code
        g(x,y):=x^2+y^2-1;
\end_layout

\begin_layout LyX-Code
        delf:evalV(grad(f(x,y)));
\end_layout

\begin_layout LyX-Code
        delg:evalV(lambda*grad(g(x,y)));
\end_layout

\begin_layout LyX-Code
        eq1:delf[1]=delg[1];
\end_layout

\begin_layout LyX-Code
        eq2:delf[2]=delg[2];
\end_layout

\begin_layout LyX-Code
        soln:solve([eq1,eq2,g(x,y)=0]);
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset

(%o1)   f(x, y) := 2 x + y
\end_layout

\begin_layout LyX-Code
                    2    2
\end_layout

\begin_layout LyX-Code
(%o2)   g(x, y) := x  + y  - 1
\end_layout

\begin_layout LyX-Code
(%o3)   [2, 1]
\end_layout

\begin_layout LyX-Code
(%o4)   [2 x lambda, 2 y lambda]
\end_layout

\begin_layout LyX-Code
(%o5)   2 = 2 x lambda
\end_layout

\begin_layout LyX-Code
(%o6)   1 = 2 y lambda
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset

                  1              sqrt(5)         2
\end_layout

\begin_layout LyX-Code
(%o7)   [[y = -------, lambda = -------, x = -------],
\end_layout

\begin_layout LyX-Code
              sqrt(5)              2         sqrt(5)
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset

                        1                sqrt(5)           2
\end_layout

\begin_layout LyX-Code
             [y = - -------, lambda = - -------, x = - -------]]
\end_layout

\begin_layout LyX-Code
                    sqrt(5)                2           sqrt(5)
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset

(%i8)   print(
\begin_inset Quotes eld
\end_inset

Extreme values:
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
        ev(f(x,y),soln[1]);
\end_layout

\begin_layout LyX-Code
        ev(f(x,y),soln[2]);
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
Extreme values:
\end_layout

\begin_layout LyX-Code
                                   5
\end_layout

\begin_layout LyX-Code
(%o9)                           -------
\end_layout

\begin_layout LyX-Code
                                sqrt(5)
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset

                                    5
\end_layout

\begin_layout LyX-Code
(%o10)                        - -------
\end_layout

\begin_layout LyX-Code
                                sqrt(5)
\end_layout

\begin_layout Subsection
Example (area and plane of a triangle)
\end_layout

\begin_layout Standard
Find the area of the triangle with vertices 
\begin_inset Formula $(1,3,4)$
\end_inset

, 
\begin_inset Formula $(5,-3,9)$
\end_inset

 and 
\begin_inset Formula $(9,-11,8)$
\end_inset

 and an equation of the plane containing it.
 
\end_layout

\begin_layout LyX-Code
(%i1)   P:[1,3,4]$
\end_layout

\begin_layout LyX-Code
        Q:[5,-3,9]$
\end_layout

\begin_layout LyX-Code
        R:[9,-11,8]$
\end_layout

\begin_layout LyX-Code
        PQ:Q-P;
\end_layout

\begin_layout LyX-Code
        PR:R-P;
\end_layout

\begin_layout LyX-Code
        n:evalV(PQ~PR);
\end_layout

\begin_layout LyX-Code
        area:Norm(n)/2;
\end_layout

\begin_layout LyX-Code
        eqn:n.([x,y,z]-P)=0;
\end_layout

\begin_layout LyX-Code
        fullratsimp(eqn)
\begin_inset CommandInset label
LatexCommand label
name "ex:fullratsimp2"

\end_inset

;
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset

(%o4)                        [4, - 6, 5]
\end_layout

\begin_layout LyX-Code
(%o5)                       [8, - 14, 4]
\end_layout

\begin_layout LyX-Code
(%o6)                       [46, 24, - 8]
\end_layout

\begin_layout LyX-Code
(%o7)                         sqrt(689)
\end_layout

\begin_layout LyX-Code
(%o8)        - 8 (z - 4) + 24 (y - 3) + 46 (x - 1) = 0)
\end_layout

\begin_layout LyX-Code
(%o9)               - 8 z + 24 y + 46 x - 86 = 0
\end_layout

\begin_layout Standard
\begin_inset Formula $\mbox{Area}=\sqrt{689}$
\end_inset

 and an equation of the plane is 
\begin_inset Formula $46x+24y-8z=86$
\end_inset

.
\end_layout

\begin_layout Section
Graphing
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
plotting|
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

see{graphing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
One of the most common practices in studying the calculus is sketching graphs.
 Maxima supplies a very rich set of commands for producing graphs of functions
 and relations.
 The examples and explanations in this section all refer to the use of Maxima's
 
\family typewriter
draw
\family default
 package
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
package!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{draw}
\end_layout

\end_inset


\end_layout

\end_inset

 which relies on gnuplot version 4.2 or later.
 If you have an older version of gnuplot, you will have to use Maxima's
 old school plotting routines (not covered in this document).
 If you don't know what version of gnuplot you have, try the routines in
 this section.
 If they work, you are all set.
 If not, you may be able to get some help from the Maxima Documentation
 website:
\end_layout

\begin_layout Standard
\align center

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{http://maxima.sourceforge.net/documentation.html}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Basic usage of the 
\family typewriter
draw
\family default
 package is explained in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Functions-explicit-parametric"

\end_inset

-
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Implicit-plots"

\end_inset

.
 Further information and additional commands are covered in the examples
 of 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Example-first"

\end_inset

-
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Example-last"

\end_inset

.
 Finally, a detailed look at common graphing options is covered in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:PlotOptions"

\end_inset

-
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Local-options"

\end_inset

.
 
\end_layout

\begin_layout Subsection
2D graphs
\begin_inset CommandInset label
LatexCommand label
name "sub:2D-graphs"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!2D
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Explicit and parametric functions
\begin_inset CommandInset label
LatexCommand label
name "sub:Functions-explicit-parametric"

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
draw2d()
\family default
 command
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{draw2d()}
\end_layout

\end_inset


\end_layout

\end_inset

 is used to plot functions or expressions of one variable.
 The arguments must contain the function(s) to be graphed, and may include
 options.
 Options are either global or not.
 Global options may be set once per plot, and apply to all functions being
 plotted by that command.
 Global options may be placed anywhere in the sequence of arguments.
 Local options apply only to the functions that follow them in the list
 of arguments.
 Local arguments may be specified any number of times in a single call to
 
\family typewriter
draw2d()
\family default
.
 One or more of the arguments must be the function to plot.
 It may be explicit, implicit, polar, parametric, or points.
 Here are some basic examples.
 Remember, the 
\family typewriter
draw2d()
\family default
 command is part of the 
\family typewriter
draw
\family default
 package
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
package!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{draw}
\end_layout

\end_inset


\end_layout

\end_inset

, so it will have to be loaded before it can be used.
\end_layout

\begin_layout LyX-Code
See Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sine-1"

\end_inset


\end_layout

\begin_layout LyX-Code
   Example 1:
\end_layout

\begin_layout LyX-Code
(%i2) load(
\begin_inset Quotes eld
\end_inset

draw
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
      draw2d(explicit(sin(x),x,-5,5))$
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{draw2d()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
   Example 2:
\end_layout

\begin_layout LyX-Code
(%i3) draw2d(
\end_layout

\begin_layout LyX-Code
          color=blue,
\end_layout

\begin_layout LyX-Code
          explicit(sec(v),v,-2,2),
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{explicit}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
          yrange=[-15,15]
\end_layout

\begin_layout LyX-Code
      )$
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{draw2d()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename sine-1.eps
	scale 65

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename secant-1.eps
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:sine-1"

\end_inset

Maxima plots of 
\begin_inset Formula $\sin(x)$
\end_inset

 and 
\begin_inset Formula $\sec(x)$
\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here are a couple more involved examples.
 Explanations for these four examples follow.
\end_layout

\begin_layout LyX-Code
See Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:involved-1"

\end_inset


\end_layout

\begin_layout LyX-Code
   Example 3:
\end_layout

\begin_layout LyX-Code
(%i12) load(
\begin_inset Quotes eld
\end_inset

draw
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
       expr:x^2$
\end_layout

\begin_layout LyX-Code
       F(x) := if x<0 then x^4-1 else 1-x^5$
\end_layout

\begin_layout LyX-Code
       draw2d(
\end_layout

\begin_layout LyX-Code
           key="x",
\end_layout

\begin_layout LyX-Code
           color="blue",
\end_layout

\begin_layout LyX-Code
           explicit(expr,x,-1,1),
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{explicit}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
           key="x^3",
\end_layout

\begin_layout LyX-Code
           color="red",
\end_layout

\begin_layout LyX-Code
           explicit(x^3,x,-1,1),
\end_layout

\begin_layout LyX-Code
           key="F(x)",
\end_layout

\begin_layout LyX-Code
           color="magenta",
\end_layout

\begin_layout LyX-Code
           explicit(F(x),x,-1,1),
\end_layout

\begin_layout LyX-Code
           yrange=[-1.5,1.5]
\end_layout

\begin_layout LyX-Code
       )$
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{draw2d()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
   Example 4:
\end_layout

\begin_layout LyX-Code
(%i2)crv1:parametric(cos(t)/2,(sin(t)-0.8)/3,t,-7*%pi/8,0)$
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{parametric}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
     crv2:parametric(cos(t),sin(t),t,-%pi,%pi)$
\end_layout

\begin_layout LyX-Code
     crv3:parametric(0.35+cos(t)/5,0.4+sin(t)/5,t,-%pi,%pi)$
\end_layout

\begin_layout LyX-Code
     crv4:parametric(-0.35+cos(t)/5,0.4+sin(t)/5,t,-9*%pi/8,%pi/8)$
\end_layout

\begin_layout LyX-Code
     draw2d(
\end_layout

\begin_layout LyX-Code
         xrange=[-1.2,1.2],
\end_layout

\begin_layout LyX-Code
         yrange=[-1.2,1.2],
\end_layout

\begin_layout LyX-Code
         line_width=3,
\end_layout

\begin_layout LyX-Code
         color=red,
\end_layout

\begin_layout LyX-Code
         proportional_axes=xy,
\end_layout

\begin_layout LyX-Code
         xaxis=true,
\end_layout

\begin_layout LyX-Code
         xaxis_type=solid,
\end_layout

\begin_layout LyX-Code
         yaxis=true,
\end_layout

\begin_layout LyX-Code
         yaxis_type=solid,
\end_layout

\begin_layout LyX-Code
         crv1,crv2,crv3,crv4
\end_layout

\begin_layout LyX-Code
     )$
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{draw2d()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename polys-1.eps
	scale 65

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename smilePlot-1.eps
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:involved-1"

\end_inset

A couple more involved plots.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As seen in the first example, the most basic way to graph a function using
 
\family typewriter
draw2d()
\family default
 is the form
\end_layout

\begin_layout Standard
\align center

\family typewriter
draw2d(function);
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{draw2d()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The example shows a graph of an explicitly defined function, 
\begin_inset Formula $f(x)=\sin(x)$
\end_inset

.
 The name of the independent variable and its interval domain must be specified
 within the call to 
\family typewriter
explicit()
\family default
.
 In the example,
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
explicit(sin(x),x,-5,5)
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{explicit}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
represents the function 
\begin_inset Formula $f(x)=\sin(x)$
\end_inset

 over the domain 
\begin_inset Formula $[-5,5]$
\end_inset

.
 In this case, the displayed range (
\begin_inset Formula $y$
\end_inset

-values) will be decided by Maxima.
 However, when the dependent variable is unbounded over the specified domain
 or a specific range for the dependent variable is desired, it is best to
 supply a 
\family typewriter
yrange
\family default
 as in the second example, 
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
draw2d(color=blue,explicit(sec(v),v,-2,2),yrange=[-15,15]);
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{explicit}
\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\noindent
Note that the independent variable may take any name.
 The third example shows how to plot more than one function on the same
 set of axes.
 You simply list more than one function in the 
\family typewriter
draw2d()
\family default
 command.
 Maxima will not by default plot each function in a different color nor
 include a legend identifying which graph is which.
 In order to produce a useful legend, each function should be given a 
\family typewriter
key
\family default
 and a 
\family typewriter
color
\family default
.
 The 
\family typewriter
key
\family default
 is the name that will be used for the function in the legend and the 
\family typewriter
color
\family default
 is of course the color that will be used to graph the function.
 The 
\family typewriter
key
\family default
 and 
\family typewriter
color
\family default
 options are not global options, so their placement in the sequence of arguments
 matters.
 Each one applies to any function that follows it up to the point where
 the option is given again.
 In contrast, the 
\family typewriter
yrange
\family default
 option is global.
 It will apply to the whole graph no matter how many functions are being
 plotted.
 As a global option, it may only be specified once, and its placement in
 the sequence of arguments is immaterial.
 The fourth example demonstrates how to make a parametric
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{parametric}
\end_layout

\end_inset


\end_layout

\end_inset

 plot and illustrates a few more options that are available for customizing
 the output.
 The basic form for a parametric plot
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!parametric equations
\end_layout

\end_inset

 is 
\end_layout

\begin_layout Standard
\align center

\family typewriter
draw2d(parametric(x(t),y(t),trange));
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{draw2d()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{parametric}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
For example, the command 
\family typewriter
draw2d( parametric( cos(t), sin(t), t, -%pi, %pi ) );
\family default
 ostensibly plots the unit circle (See figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:quasi-circle-1"

\end_inset

, left side).
 However, due to the aspect ratio, it is oblong when it should not be.
 And upon close inspection, you may notice it is a 28-gon, not a circle!
 For this size graphic, that may not be a problem, but for larger plots,
 the polygonal shape will be clear.
 These problems can be fixed by adding options to the draw command.
 Plot options are always specified in the 
\family typewriter
option = value
\family default
 format.
 The option 
\family typewriter
proportional_axes = xy
\family default
 will fix the aspect ratio so the resulting figure actually appears circular.
 And the option 
\family typewriter
nticks = 80
\family default
 will force Maxima to draw an 80-gon which will appear much more circular.
 Here is the complete command: 
\family typewriter
draw2d( nticks = 80, parametric( cos(t), sin(t), t, -%pi, %pi ), proportional_ax
es = xy);
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{parametric}
\end_layout

\end_inset


\end_layout

\end_inset

 Note well, the placement of the 
\family typewriter
nticks = 80
\family default
 option is important.
 Since it is not a global option, it must come before the graph to which
 it is to apply.
 See the results of both circle plots in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:quasi-circle-1"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename quasi-circle-1.eps
	scale 65

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename circle-1.eps
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:quasi-circle-1"

\end_inset

This is a circle?
\end_layout

\end_inset


\end_layout

\end_inset

 There are many other plot options, a few of which are used in the fourth
 example.
 In particular, the smiley face plot (the fourth example) uses the options
\end_layout

\begin_layout Itemize
\noindent

\family typewriter
line_width = 3
\end_layout

\begin_layout Itemize

\family typewriter
xaxis = true
\end_layout

\begin_layout Itemize

\family typewriter
xaxis_type = solid
\end_layout

\begin_layout Itemize
\noindent

\family typewriter
xrange = [-1.2,1.2]
\end_layout

\begin_layout Standard
The 
\family typewriter
line_width
\family default
 option is of course used to modify the width of the plotted line.
 The default width is 1, but the line width may be set to any positive integer.
 The example shows how to draw a solid 
\begin_inset Formula $x$
\end_inset

-axis using the options 
\family typewriter
xaxis = true
\family default
 and 
\family typewriter
xaxis_type = solid
\family default
.
 Finally, the 
\family typewriter
xrange
\family default
 tells Maxima what values of the independent variable to show on the horizontal
 axis.
 Note that this interval is independent of the specified domain of any explicit
 function or the implied domain of any parametric function.
 Of course, the 
\begin_inset Formula $y$
\end_inset

-axis is controlled analogously.
\end_layout

\begin_layout Subsubsection
Polar functions
\begin_inset CommandInset label
LatexCommand label
name "sub:Polar-functions"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!polar functions
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
draw2d()
\family default
 has the capability of graphing polar functions using the 
\family typewriter
polar()
\family default
 construct
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{polar}
\end_layout

\end_inset


\end_layout

\end_inset

.
 The 
\family typewriter
polar()
\family default
 call is used just as the 
\family typewriter
explicit()
\family default
 call except that the independent variable is interpreted as the angle and
 the dependent variable the radius.
 For example, 
\family typewriter
polar ( 3, th, 0, 2*%pi )
\family default
 specifies the circle of radius 3 centered at the origin.
 Another simple example is the hyperbolic spiral 
\begin_inset Formula $r(\theta)=10/\theta$
\end_inset

.
 The following example graphs this function for 
\begin_inset Formula $\theta\in[1,15\pi]$
\end_inset

, once using all the default options, and then again using some reasonable
 options to make the graph presentable.
\end_layout

\begin_layout LyX-Code
(%i28) load(
\begin_inset Quotes eld
\end_inset

draw
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
(%i29) draw2d(polar(10/theta,theta,1,15*%pi))$
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{polar}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
(%i30) draw2d(
\end_layout

\begin_layout LyX-Code
           user_preamble="set grid polar",
\end_layout

\begin_layout LyX-Code
           color=red,
\end_layout

\begin_layout LyX-Code
           line_width=3,
\end_layout

\begin_layout LyX-Code
           xrange=[-4,4],
\end_layout

\begin_layout LyX-Code
           yrange=[-3,3],
\end_layout

\begin_layout LyX-Code
           nticks=300,
\end_layout

\begin_layout LyX-Code
           title=
\begin_inset Quotes eld
\end_inset

Hyperbolic Spiral
\begin_inset Quotes erd
\end_inset

,
\end_layout

\begin_layout LyX-Code
           polar(10/theta,theta,1,15*%pi)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{polar}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
       )$
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename spiral.eps
	scale 65

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename spiral-fancy.eps
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:polar-graphs"

\end_inset

A hyperbolic spiral with default options (left) and more reasonable options
 (right).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The options are discussed in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Functions-explicit-parametric"

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:PlotOptions"

\end_inset

.
 The cryptic format of the 
\family typewriter
user_preamble
\family default
 option is due to the fact that it must contain gnuplot commands.
 Gnuplot is Maxima's plotting engine, and its syntax and conventions are
 independent of those of Maxima.
 See the results of the two hyperbolic spiral graphs in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:polar-graphs"

\end_inset

.
 Note that setting the 
\family typewriter
xrange
\family default
:
\family typewriter
yrange
\family default
 ratio to 4:3 is another way to ensure that the aspect ratio of a plot is
 reasonably close to 1:1.
 This method, however, is not as precise as the 
\family typewriter
proportional_axes = xy
\family default
 option.
 
\end_layout

\begin_layout Subsubsection
Discrete data
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!discrete data
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:Discrete-data"

\end_inset


\end_layout

\begin_layout Standard
Graphs of discrete data sets are also graphed using the 
\family typewriter
draw2d()
\family default
 command.
 The 
\family typewriter
points()
\family default
 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{points}
\end_layout

\end_inset


\end_layout

\end_inset

construct tells Maxima to plot data points.
 Suppose you want to plot the data set 
\begin_inset Formula 
\[
\{(0,1),(5,5),(10,5),(15,4),(20,6),(25,5)\}.
\]

\end_inset

By default, Maxima will produce a scatter plot
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!scatter plot
\end_layout

\end_inset

 of the points.
 If this is what you want, then you are all set.
 You just need to provide Maxima with the data and call the 
\family typewriter
draw2d()
\family default
 command:
\end_layout

\begin_layout LyX-Code
(%i20) load(
\begin_inset Quotes eld
\end_inset

draw
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
       xx:[0,5,10,15,20,25]$
\end_layout

\begin_layout LyX-Code
       yy:[1,5,5,4,6,5]$
\end_layout

\begin_layout LyX-Code
       draw2d(
\end_layout

\begin_layout LyX-Code
           color=red,
\end_layout

\begin_layout LyX-Code
           point_size=2,
\end_layout

\begin_layout LyX-Code
           point_type=filled_circle,
\end_layout

\begin_layout LyX-Code
           points(xx,yy)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{points}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
       );
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{draw2d()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you prefer a trend line with no points, change the 
\family typewriter
point_type
\family default
 to 
\family typewriter
none
\family default
 and specify 
\family typewriter
points_joined=true
\family default
 as in 
\family typewriter
draw2d ( point_type = none, points_joined = true, points( xx, yy ) );
\family default

\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename dataScatter-1.eps
	scale 65

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename dataTrend.eps
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:data-plot-1"

\end_inset

Plotting discrete data.
\end_layout

\end_inset


\end_layout

\end_inset

 The results of these two plots are shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:data-plot-1"

\end_inset

.
 See 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:PlotOptions"

\end_inset

 for a more complete explanation of the options.
 You may wish to get even fancier by plotting both the points and the connecting
 line segments.
 This can be achieved by plotting the data twice, once with each set of
 options as above.
 But be careful, once an option is set, it applies to all graphs that follow
 it, so it will be necessary to unset some options sometimes (as in 
\family typewriter
points_joined = false
\family default
 in the example).
 Or perhaps you would like to plot a best-fit line along with the data.
 These graphs are shown in the next two examples.
 See Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:data-plot-fancy-1"

\end_inset

 for the results.
\end_layout

\begin_layout LyX-Code
(%i7) load(
\begin_inset Quotes eld
\end_inset

draw
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
      xx:[0,5,10,15,20,25]$
\end_layout

\begin_layout LyX-Code
      yy:[1,5,5,4,6,5]$
\end_layout

\begin_layout LyX-Code
      xy:makelist([xx[i],yy[i]],i,1,6);
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{makelist()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
      draw2d(
\end_layout

\begin_layout LyX-Code
          point_type=none,
\end_layout

\begin_layout LyX-Code
          points_joined=true,
\end_layout

\begin_layout LyX-Code
          points(xy),
\end_layout

\begin_layout LyX-Code
          point_size=2,
\end_layout

\begin_layout LyX-Code
          point_type=filled_circle,
\end_layout

\begin_layout LyX-Code
          color=red,
\end_layout

\begin_layout LyX-Code
          points_joined=false,
\end_layout

\begin_layout LyX-Code
          points(xy)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{points}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
      )$
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{draw2d()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%o7) [[0,1],[5,5],[10,5],[15,4],[20,6],[25,5]]
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i8) bestfit:0.1257*x+2.7619$
\end_layout

\begin_layout LyX-Code
      draw2d(
\end_layout

\begin_layout LyX-Code
          key="best fit line",
\end_layout

\begin_layout LyX-Code
          explicit(bestfit,x,0,25),
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{explicit}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
          point_size=2,
\end_layout

\begin_layout LyX-Code
          point_type=filled_circle,
\end_layout

\begin_layout LyX-Code
          color=red,
\end_layout

\begin_layout LyX-Code
          key="data",
\end_layout

\begin_layout LyX-Code
          points(xy),
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{points}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
          yrange=[0,10],
\end_layout

\begin_layout LyX-Code
          user_preamble="set key bottom"
\end_layout

\begin_layout LyX-Code
      );
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename dataCombo-1.eps
	scale 65

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename dataFitted.eps
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:data-plot-fancy-1"

\end_inset

Fancier discrete data plots.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{draw2d()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Notice that the 
\family typewriter
makelist()
\family default
 command was used to combine the data into a single list of 
\begin_inset Formula $[x,y]$
\end_inset

 ordered pairs.
 This is an alternative format for inputting the data for a discrete plot.
\end_layout

\begin_layout Subsubsection
Implicit plots
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!implicit relations
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:Implicit-plots"

\end_inset


\end_layout

\begin_layout Standard
Yet another graphing feature of the 
\family typewriter
draw2d()
\family default
 command is the ability to graph implicitly defined relations.
 The syntax is very much like that of 
\family typewriter
explicit()
\family default
 but 
\family typewriter
implicit()
\family default
 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{implicit}
\end_layout

\end_inset


\end_layout

\end_inset

requires that intervals for both variables involved in the relation be specified.
 Maxima does not assume that the variable 
\begin_inset Formula $x$
\end_inset

 is to be plotted against the horizontal axis and that 
\begin_inset Formula $y$
\end_inset

 is to be plotted againt the vertical.
 The variable first listed in the implicit call will be graphed against
 the horizontal axis and the second listed will be graphed against the vertical
 axis.
 And neither one has to be 
\begin_inset Formula $x$
\end_inset

 and neither one has to be 
\begin_inset Formula $y$
\end_inset

.
 Here are two examples.
 The first one just produces an implicit plot.
 The second one finds an equation of the tangent line to an implicit graph
 and plots both.
 See figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:implicit-plot-1"

\end_inset

.
\end_layout

\begin_layout LyX-Code
(%i11) load(
\begin_inset Quotes eld
\end_inset

draw
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
       eqn:(u^2+v^3)*sin(sqrt(4*u^2+v^2))=3$
\begin_inset Newline newline
\end_inset

       draw2d(implicit(eqn,u,-5,5,v,-5,5))$
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{draw2d()}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{implicit}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%i15) eqn:s^2=t^3-3*t+1$
\end_layout

\begin_layout LyX-Code
       s0:1$
\end_layout

\begin_layout LyX-Code
       t0:0$
\end_layout

\begin_layout LyX-Code
       depends(t,s)$
\end_layout

\begin_layout LyX-Code
       subst([diff(t,s)=D,s=s0,t=t0],diff(eqn,s))$
\end_layout

\begin_layout LyX-Code
       D0:subst(solve(%,D),D)$
\end_layout

\begin_layout LyX-Code
       tanline:t-t0=D0*(s-s0)$
\end_layout

\begin_layout LyX-Code
       draw2d(
\end_layout

\begin_layout LyX-Code
           color=blue,
\end_layout

\begin_layout LyX-Code
           key="s^2=t^3-3*t+1",
\end_layout

\begin_layout LyX-Code
           implicit(eqn,s,-4,4,t,-2.5,3.5),
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{implicit}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
           color=red,
\end_layout

\begin_layout LyX-Code
           key="tangent line",
\end_layout

\begin_layout LyX-Code
           implicit(tanline,s,-4,4,t,-2.5,3.5),
\end_layout

\begin_layout LyX-Code
           xaxis=true, xaxis_type=solid,
\end_layout

\begin_layout LyX-Code
           yaxis=true, yaxis_type=solid,
\end_layout

\begin_layout LyX-Code
       )$
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename implicit1-1.eps
	scale 65

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename implicit2-1.eps
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:implicit-plot-1"

\end_inset

Implicit plot examples.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
texttt{draw2d()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that an alternative way to graph the tangent line is to define 
\family typewriter
tanline
\family default
 explicitly as in 
\family typewriter
tanline : D0 * ( s - s0 ) + t0$
\family default
 and then use an explicit call as in 
\family typewriter
explicit ( tanline, s, -4, 4 )
\family default
 instead of the implicit call used above.
\end_layout

\begin_layout Subsubsection
Example (obtaining output as a graphics file)
\begin_inset CommandInset label
LatexCommand label
name "sub:Example-first"

\end_inset


\end_layout

\begin_layout Standard
To obtain graphics file output such as EPS, PNG, GIF, or JPG, use the 
\family typewriter
file_name
\family default
 and 
\family typewriter
terminal
\family default
 options.
 The value for 
\family typewriter
file_name
\family default
 should be the desired file name without extension.
 The 
\family typewriter
terminal
\family default
 type will determine what format the output will take.
 The following example will create a graph of the sine function in the file
 
\family typewriter
sine.png
\family default
.
 A more involved example can be found in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Example-last"

\end_inset

.
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout LyX-Code
(%i10) load(
\begin_inset Quotes eld
\end_inset

draw
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
       draw2d(
\end_layout

\begin_layout LyX-Code
           explicit(sin(x),x,-5,5),
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{explicit}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
           file_name="sine",
\end_layout

\begin_layout LyX-Code
           terminal='png
\end_layout

\begin_layout LyX-Code
       );
\end_layout

\begin_layout Standard
NOTE: If you are using wxMaxima, the output graphics file may not be created.
 However, a file named 
\family typewriter
maxout.gnuplot
\family default
 will be.
 In order to get your graphics file (
\family typewriter
sine.png
\family default
 in the example), you will need to locate 
\family typewriter
maxout.gnuplot
\family default
 and, from the command line, run the command 
\family typewriter
gnuplot maxout.gnuplot
\family default
.
\end_layout

\begin_layout Subsubsection
Example (using a grid and logarithmic axes)
\end_layout

\begin_layout Standard
Plotting a grid is as easy as setting 
\family typewriter
grid
\family default
 to true.
 Setting the axes to use a logarithmic scale is similarly simple.
 The example shows how a polynomial appears logarithmic while an exponential
 function appears linear when the 
\begin_inset Formula $y$
\end_inset

-axis is logarithmic.
 To see how to set the grid for a polar plot, refer to 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Polar-functions"

\end_inset

.
\end_layout

\begin_layout LyX-Code
(%i9) load(
\begin_inset Quotes eld
\end_inset

draw
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
      draw2d(
\end_layout

\begin_layout LyX-Code
          logy=true,
\end_layout

\begin_layout LyX-Code
          grid=true,
\end_layout

\begin_layout LyX-Code
          explicit(exp(x),x,1,40),
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{explicit}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
          explicit(x^10,x,1,40)
\end_layout

\begin_layout LyX-Code
      );
\end_layout

\begin_layout Standard
See figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Logarithms-and-labels"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Example (setting draw() defaults)
\end_layout

\begin_layout Standard
If you are creating multiple graphs, each of which share some common set
 of options, you may find the use of 
\family typewriter
set_draw_defaults()
\family default
 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{set draw defaults()}
\end_layout

\end_inset


\end_layout

\end_inset

helpful.
 Instead of setting the common options for each graph, you set them once
 in the 
\family typewriter
set_draw_defaults()
\family default
 command.
 In the example, all graphs will be plotted with thick blue lines, axes
 showing, no upper or right boundary lines, and with the same 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 ranges.
\end_layout

\begin_layout LyX-Code
(%i88) load(
\begin_inset Quotes eld
\end_inset

draw
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
       set_draw_defaults(
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{set draw defaults()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
           xaxis=true,
\end_layout

\begin_layout LyX-Code
           yaxis=true,
\end_layout

\begin_layout LyX-Code
           xrange=[-4,4],
\end_layout

\begin_layout LyX-Code
           yrange=[-3,3],
\end_layout

\begin_layout LyX-Code
           axis_right=false,
\end_layout

\begin_layout LyX-Code
           axis_top=false,
\end_layout

\begin_layout LyX-Code
           color=blue,
\end_layout

\begin_layout LyX-Code
           line_width=4,
\end_layout

\begin_layout LyX-Code
           terminal=eps
\end_layout

\begin_layout LyX-Code
       );
\end_layout

\begin_layout LyX-Code
       draw2d(explicit(x^2,x,-4,4),file_name="quadratic");
\end_layout

\begin_layout LyX-Code
       draw2d(explicit(x^3,x,-4,4),file_name="cubic");
\end_layout

\begin_layout LyX-Code
       draw2d(explicit(x^4,x,-4,4),file_name="quartic");
\end_layout

\begin_layout LyX-Code
       draw2d(explicit(x^5,x,-4,4),file_name="quintic");
\end_layout

\begin_layout LyX-Code
       draw2d(explicit(x^6,x,-4,4),file_name="hexic");
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{explicit}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Also see 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Example-last"

\end_inset

 for an example using 
\family typewriter
set_draw_defaults()
\family default
 to create a Taylor Polynomial animation.
\end_layout

\begin_layout Subsubsection
Example (including labels in a graph)
\end_layout

\begin_layout Standard
Including a label in a graph is as easy as placing a 
\family typewriter
label()
\family default
 construct in the sequence of arguments of a 
\family typewriter
draw2d()
\family default
 command.
 The 
\family typewriter
label()
\family default
 construct takes three arguments: the label and the coordinates where the
 label should be placed.
 The alignment and orientation of labels are controlled by the 
\family typewriter
label_alignment
\family default
 and 
\family typewriter
label_orientation
\family default
 options.
\end_layout

\begin_layout LyX-Code
(%i1) load(
\begin_inset Quotes eld
\end_inset

draw
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
      draw2d(
\end_layout

\begin_layout LyX-Code
          label(["crest",%pi/2,1.05]),
\end_layout

\begin_layout LyX-Code
          label(["trough",-%pi/2,-0.93]),
\end_layout

\begin_layout LyX-Code
          label_alignment='left,
\end_layout

\begin_layout LyX-Code
          label(["baseline",-2,0.05]),
\end_layout

\begin_layout LyX-Code
          label_alignment=center,
\end_layout

\begin_layout LyX-Code
          label_orientation=vertical,
\end_layout

\begin_layout LyX-Code
          label(["amplitude",%pi/2-0.1,0.5]),
\end_layout

\begin_layout LyX-Code
          rectangle([%pi/2,0],[%pi/2,1]),
\end_layout

\begin_layout LyX-Code
          color=goldenrod,
\end_layout

\begin_layout LyX-Code
          line_width=3,
\end_layout

\begin_layout LyX-Code
          explicit(sin(x),x,-3,3),
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{explicit}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
          title="Parts of a sinusoidal wave",
\end_layout

\begin_layout LyX-Code
          yrange=[-1,1.2],
\end_layout

\begin_layout LyX-Code
          grid=true,
\end_layout

\begin_layout LyX-Code
          xaxis=true, xaxis_type=solid,
\end_layout

\begin_layout LyX-Code
          yaxis=true, yaxis_type=solid,
\end_layout

\begin_layout LyX-Code
      );
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename gridLog.eps
	scale 65

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename labelExample.eps
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Logarithms-and-labels"

\end_inset

Logarithmic axes on the left and a labeled graph on the right.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
See figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Logarithms-and-labels"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Example (graphing the area between two curves)
\end_layout

\begin_layout Standard
Use the 
\family typewriter
filled_func
\family default
 and 
\family typewriter
fill_color
\family default
 options to graph the area between two curves.
 Set 
\family typewriter
filled_func
\family default
 to one of the functions and afterward plot the other function using 
\family typewriter
explicit
\family default
.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{explicit}
\end_layout

\end_inset


\end_layout

\end_inset

 When 
\family typewriter
filled_func
\family default
 is used, the functions themselves are not graphed.
 Only the region between them is graphed.
 Therefore, in the example functions 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g$
\end_inset

 are graphed afterward in thick black lines.
 To graph the area between a function and the 
\begin_inset Formula $x$
\end_inset

-axis, set 
\family typewriter
filled_func=0
\family default
.
\end_layout

\begin_layout LyX-Code
(%i1) load(
\begin_inset Quotes eld
\end_inset

draw
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
      f:x^2$
\end_layout

\begin_layout LyX-Code
      g:x^3$
\end_layout

\begin_layout LyX-Code
      draw2d(
\end_layout

\begin_layout LyX-Code
          filled_func=f,
\end_layout

\begin_layout LyX-Code
          fill_color=green,
\end_layout

\begin_layout LyX-Code
          explicit(g,x,-4/3,4/3),
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{explicit}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
          line_width=2,
\end_layout

\begin_layout LyX-Code
          filled_func=false,
\end_layout

\begin_layout LyX-Code
          explicit(f,x,-4/3,4/3),
\end_layout

\begin_layout LyX-Code
          explicit(g,x,-4/3,4/3), 
\end_layout

\begin_layout LyX-Code
          yrange=[-1,1],
\end_layout

\begin_layout LyX-Code
          xaxis=true,
\end_layout

\begin_layout LyX-Code
          yaxis=true
\end_layout

\begin_layout LyX-Code
      );
\end_layout

\begin_layout Standard
See figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Area-and-Taylor"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Example (creating a Taylor polynomial animation)
\begin_inset CommandInset label
LatexCommand label
name "sub:Example-last"

\end_inset


\end_layout

\begin_layout Standard
The following set of commands can be used as a template for creating animations
 of Taylor Polynomials converging to a function.
 Only the first 4 lines need to be modified to change the function of interest.
 As it stands, it will show the first 18 (counting the 
\begin_inset Formula $0^{th}$
\end_inset

) Taylor polynomials for 
\begin_inset Formula $\sin(x)$
\end_inset

.
\end_layout

\begin_layout LyX-Code
(%i8) load(
\begin_inset Quotes eld
\end_inset

draw
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
      f(x):=sin(x);
\end_layout

\begin_layout LyX-Code
      graph_name:"sin(x)"$
\end_layout

\begin_layout LyX-Code
      set_draw_defaults(xaxis=true, yrange=[-4,4])$
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{set draw defaults()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
      options:[file_name="sine",terminal=animated_gif,delay=100]$
\end_layout

\begin_layout LyX-Code
      graph_title:["Zeroth Taylor Polynomial", "First Taylor Polynomial",
\end_layout

\begin_layout LyX-Code
                    "Second Taylor Polynomial", "Third Taylor Polynomial",
\end_layout

\begin_layout LyX-Code
                   "Fourth Taylor Polynomial", "Fifth Taylor Polynomial",
\end_layout

\begin_layout LyX-Code
                   "Sixth Taylor Polynomial", "Seventh Taylor Polynomial",
\end_layout

\begin_layout LyX-Code
                   "Eighth Taylor Polynomial", "Ninth Taylor Polynomial",
\end_layout

\begin_layout LyX-Code
                   "Tenth Taylor Polynomial", "Eleventh Taylor Polynomial",
\end_layout

\begin_layout LyX-Code
                   "Twelfth Taylor Polynomial", "Thirteenth Taylor Polynomial",
\end_layout

\begin_layout LyX-Code
                   "Fourteenth Taylor Polynomial", "Fifteenth Taylor Polynomial"
,
\end_layout

\begin_layout LyX-Code
                   "Sixteenth Taylor Polynomial", "Seventeenth Taylor Polynomial
"]$
\end_layout

\begin_layout LyX-Code
      graph_color:["red", "yellow", "green", "blue", "cyan", "magenta",
\end_layout

\begin_layout LyX-Code
                   "turquoise", "pink", "goldenrod", "salmon",
\end_layout

\begin_layout LyX-Code
                   "red", "yellow", "green", "blue", "cyan", "magenta",
\end_layout

\begin_layout LyX-Code
                   "turquoise", "pink", "goldenrod", "salmon"]$
\end_layout

\begin_layout LyX-Code
      scene:makelist(gr2d(
\end_layout

\begin_layout LyX-Code
                          key=graph_name,
\end_layout

\begin_layout LyX-Code
                          explicit(f(x),x,-10,10),
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{explicit}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
                          title=graph_title[i],
\end_layout

\begin_layout LyX-Code
                          color=graph_color[i],
\end_layout

\begin_layout LyX-Code
                          line_width=2,
\end_layout

\begin_layout LyX-Code
                          key="",
\end_layout

\begin_layout LyX-Code
                          explicit(taylor(f(x),x,0,i-1),x,-10,10)
\end_layout

\begin_layout LyX-Code
                     ),i,1,18)$
\end_layout

\begin_layout LyX-Code
      apply(draw,append(options,scene));
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename areaBetween.eps
	scale 65

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename sine.gif
	lyxscale 50
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Area-and-Taylor"

\end_inset

Area between curves on the left and one frame of a Taylor polynomial animation
 on the right.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
See figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Area-and-Taylor"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Options
\begin_inset CommandInset label
LatexCommand label
name "sub:PlotOptions"

\end_inset


\end_layout

\begin_layout Standard
Some of the most useful options for 2D graphs are listed below.
 For a complete list of options and complete description of the options
 below see the Maxima Reference Manual at 
\end_layout

\begin_layout Standard
\align center

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{http://maxima.sourceforge.net/documentation.html}
\end_layout

\end_inset

,
\end_layout

\begin_layout Standard
\noindent
section 51 draw.
 In the following discussion, possible values where appropriate will be
 listed in 
\shape italic
italic
\shape default
 and the default value will be highlighted in 
\series bold
\shape italic
bold italic
\series default
\shape default
.
\end_layout

\begin_layout Standard
Options are either global or local.
 Global options may be placed anywhere in the sequence of arguments and
 may be set only once per plot.
 Global options apply to all functions being plotted by that command.
 Local options apply only to the functions that follow them in the list
 of arguments.
 Local options may be specified any number of times in a single plot.
 Each successive value overrides the previous value.
\end_layout

\begin_layout Subsubsection
Global options
\begin_inset CommandInset label
LatexCommand label
name "sub:Global-options"

\end_inset


\end_layout

\begin_layout Standard
Global options may only be specified once per plot.
 Their placement in the sequence of arguments is unimportant.
 These options affect the overall appearance of a plot irrespective of the
 graphs (functions) being plotted.
\end_layout

\begin_layout Description
axis_bottom,
\begin_inset space ~
\end_inset

axis_left,
\begin_inset space ~
\end_inset

axis_right,
\begin_inset space ~
\end_inset

axis_top Possible values are 
\series bold
\shape italic
true
\series default
\shape default
 and 
\shape italic
false
\shape default
.
 Determines whether to draw the bottom, left, right, or top of the bounding
 box for a 2D graph.
\end_layout

\begin_layout Description
eps_width,
\begin_inset space ~
\end_inset

eps_height The width and height in centimeters of the Postscript graphic
 produced by terminals 
\family typewriter
eps
\family default
 and 
\family typewriter
eps_color
\family default
.
 Default values are 
\series bold
\shape italic
12
\series default
\shape default
 and 
\series bold
\shape italic
8
\series default
\shape default
, respectively.
\end_layout

\begin_layout Description
file_name The desired name of the graphics file to be produced by terminals
 
\family typewriter
eps
\family default
, 
\family typewriter
eps_color
\family default
, 
\family typewriter
png
\family default
, 
\family typewriter
jpg
\family default
, 
\family typewriter
gif
\family default
, and 
\family typewriter
animated_gif
\family default
 without extension.
 For example, 
\family typewriter
file_name=
\begin_inset Quotes eld
\end_inset

circle
\begin_inset Quotes erd
\end_inset


\family default
 would cause terminal 
\family typewriter
eps
\family default
 to produce a file named 
\family typewriter
circle.eps
\family default
 and would cause terminal 
\family typewriter
png
\family default
 to produce a file named 
\family typewriter
circle.png
\family default
.
 The default name is 
\series bold
\shape italic
maxima_out
\series default
\shape default
.
 
\end_layout

\begin_layout Description
grid Possible values are 
\shape italic
true
\shape default
 and 
\series bold
\shape italic
false
\series default
\shape default
.
 Determines whether a grid is to be shown on the 
\begin_inset Formula $x$
\end_inset

-
\begin_inset Formula $y$
\end_inset

 plane.
\end_layout

\begin_layout Description
logx,
\begin_inset space ~
\end_inset

logy Possible values are 
\shape italic
true
\shape default
 and 
\series bold
\shape italic
false
\series default
\shape default
.
 Determines whether the specified axis should be drawn in logarithmic scale
 or not.
\end_layout

\begin_layout Description
pic_width,
\begin_inset space ~
\end_inset

pic_height The width and height in pixels of the graphic produced by terminals
 
\family typewriter
png
\family default
 and 
\family typewriter
jpg
\family default
.
 Default values are 
\series bold
\shape italic
640
\series default
\shape default
 and 
\series bold
\shape italic
480
\series default
\shape default
, respectively.
\end_layout

\begin_layout Description
terminal Possible values are 
\shape italic
eps
\shape default
, 
\shape italic
eps_color
\shape default
, 
\shape italic
jpg
\shape default
, 
\shape italic
png
\shape default
, 
\shape italic
gif
\shape default
, 
\shape italic
animated_gif
\shape default
, and 
\series bold
\shape italic
screen
\series default
\shape default
.
 Determines where the drawing of the graph will be done.
 The default value, 
\family typewriter
screen
\family default
, indicates that the graph should be shown on the screen.
 Each of the other values indicates that a graphic file (of type equal to
 the terminal value) should be created instead.
 No graph will be shown on screen.
 Instead, a graphic file will be created on disk.
\end_layout

\begin_layout Description
title The main title to be used for a graph.
 Default value is 
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset

 (no title).
\end_layout

\begin_layout Description
user_preamble Will insert gnuplot commands at the beginning of the gnuplot
 command list.
 Default value is 
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset

 (no preamble).
 Some features of gnuplot can only be accessed this way.
 For example, some possible preambles are
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

set size ratio 1
\begin_inset Quotes erd
\end_inset

 (Sets the height:width ratio for a graph to 1.
 Useful for making circles look like circles, for example.
 Has the same effect as the option 
\family typewriter
proportional_axes=true
\family default
)
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

set grid polar
\begin_inset Quotes erd
\end_inset

 (Makes a polar grid appear on the graph.)
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

set key bottom
\begin_inset Quotes erd
\end_inset

 (Makes the legend appear at the bottom of the graph instead of the default
 position, top.)
\end_layout

\end_deeper
\begin_layout Description
xaxis,
\begin_inset space ~
\end_inset

yaxis Possible values are 
\shape italic
true
\shape default
 and 
\series bold
\shape italic
false
\series default
\shape default
.
 When true the specified axis will be drawn.
\end_layout

\begin_layout Description
xaxis_color,
\begin_inset space ~
\end_inset

yaxis_color See 
\family typewriter
color
\family default
 option for usage.
 Determines the color to use for the specified axis when it is drawn.
\end_layout

\begin_layout Description
xaxis_type,
\begin_inset space ~
\end_inset

yaxis_type Possible values are 
\shape italic
solid
\shape default
 and 
\series bold
\shape italic
dots
\series default
\shape default
.
 Determines the type of line to use for the specified axis when it is drawn.
\end_layout

\begin_layout Description
xaxis_width,
\begin_inset space ~
\end_inset

yaxis_width Possible values are positive numbers.
 Default value is 
\series bold
\shape italic
1
\series default
\shape default
.
 Determines the width of the line to use for the specified axis when it
 is drawn.
\end_layout

\begin_layout Description
xlabel,
\begin_inset space ~
\end_inset

ylabel The title to be used for the specified axis.
 Default value is 
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset

 (no title).
\end_layout

\begin_layout Description
xrange,
\begin_inset space ~
\end_inset

yrange Possible values are 
\series bold
\shape italic
auto
\series default
\shape default
 or an interval in the form 
\begin_inset Formula $[\mbox{min},\mbox{max}]$
\end_inset

.
 Specifies the interval to be shown for the indicated axis.
 Note that this range can be set independently of the domain interval that
 must be specified for the independent variable in explicit and parametric
 plots.
\end_layout

\begin_layout Description
xtics,
\begin_inset space ~
\end_inset

ytics Affects the drawing of tic marks along the indicated axis.
 Possible values and their appearance as described in the following table.
 The default value is 
\series bold
\shape italic
auto
\series default
\shape default
.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="3in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Appearance
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
auto
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tic marks are automatically drawn
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
none
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no tic marks are drawn
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
positive number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tic marks will be spaced this far apart
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
[start,inc,end]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tic marks will be placed from 
\family typewriter
start
\family default
 to 
\family typewriter
end
\family default
 in increments of 
\family typewriter
inc
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\{r_{1},r_{2},\ldots,r_{n}\}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tic marks will be placed at the values 
\begin_inset Formula $r_{1},r_{2},\ldots,r_{n}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\{["l_{1}",r_{1}],["l_{2}",r_{2}],\ldots,["l_{3}",r_{3}]\}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tic marks will be placed at the values 
\begin_inset Formula $r_{1},r_{2},\ldots,r_{n}$
\end_inset

 and will be labeled 
\begin_inset Formula $l_{1},l_{2},\ldots,l_{n}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Local options
\begin_inset CommandInset label
LatexCommand label
name "sub:Local-options"

\end_inset


\end_layout

\begin_layout Standard
Local options may be specified as many times as desired in a given plot.
 Each time a local option is specified, it affects every graphic object
 that follows it in the list of arguments.
\end_layout

\begin_layout Description
color Possible values are names of colors or a hexadecimal RGB code in the
 format #rrggbb.
 The default color is 
\series bold
\shape italic
black
\series default
\shape default
.
 Other possible color names are 
\shape italic
white
\shape default
, 
\shape italic
gray
\shape default
, 
\shape italic
red
\shape default
, 
\shape italic
yellow
\shape default
, 
\shape italic
green
\shape default
, 
\shape italic
blue
\shape default
, 
\shape italic
cyan
\shape default
, 
\shape italic
magenta
\shape default
, 
\shape italic
turquoise
\shape default
, 
\shape italic
pink
\shape default
, 
\shape italic
salmon
\shape default
, and 
\shape italic
goldenrod
\shape default
.
 Each of these colors except for black and white may be prefixed by either
 
\shape italic

\begin_inset Quotes eld
\end_inset

light-
\shape default

\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset


\shape italic
dark-
\shape default

\begin_inset Quotes erd
\end_inset

 as in 
\shape italic
light-red
\shape default
.
 When specifying a color with a 
\begin_inset Quotes eld
\end_inset

-
\begin_inset Quotes erd
\end_inset

 in the name, it must be enclosed in parentheses.
 For example, 
\family typewriter
color=blue
\family default
 is OK, but 
\family typewriter
color=light-blue
\family default
 is not.
 To specify light-blue, use 
\family typewriter
color=
\begin_inset Quotes eld
\end_inset

light-blue
\begin_inset Quotes erd
\end_inset


\family default
.
 Affects lines, points, borders, polygons, and labels.
\end_layout

\begin_layout Description
fill_color See 
\family typewriter
color
\family default
 for possible values.
 Default value is 
\series bold
\shape italic
red
\series default
\shape default
.
 Affects the filling of polygons and filled functions.
\end_layout

\begin_layout Description
filled_func Possible values are 
\shape italic
true
\shape default
, 
\series bold
\shape italic
false
\series default
\shape default
, and a 
\shape italic
function expression
\shape default
.
 When true, will cause the region between an 
\family typewriter
explicit
\family default
 function and the bottom of the graphing window to be filled in 
\family typewriter
fill_color
\family default
.
 When supplied with a function expression, will fill the region between
 the supplied function and an 
\family typewriter
explicit
\family default
 function with 
\family typewriter
fill_color
\family default
.
\end_layout

\begin_layout Description
key The name to use for a function in the legend.
 Default value is 
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset

 (no name).
\end_layout

\begin_layout Description
label_alignment Possible values are 
\series bold
\shape italic
center
\series default
\shape default
, 
\shape italic
left
\shape default
, and 
\shape italic
right
\shape default
.
 Determines how a label will be justified relative to its specified coordinates.
\end_layout

\begin_layout Description
label_orientation Possible values are 
\series bold
\shape italic
horizontal
\series default
\shape default
 and 
\shape italic
vertical
\shape default
.
 Affects the orientation of labels.
\end_layout

\begin_layout Description
line_width Possible values are positive integers.
 Default value is 
\series bold
\shape italic
1
\series default
\shape default
.
 Affects points, rectangle, explicit, implicit, parametric, and polar.
\end_layout

\begin_layout Description
line_type Possible values are 
\series bold
\shape italic
solid
\series default
\shape default
 and 
\shape italic
dot
\shape default
s.
 Affects points, rectangle, explicit, implicit, parametric, and polar.
\end_layout

\begin_layout Description
nticks Possible values are positive integers.
 Default value is 
\series bold
\shape italic
29
\series default
\shape default
.
 Specifies the initial number of points to use in the adaptive routine for
 explicit plots.
 Also determines the number of points to plot in parametric and polar graphs.
 Note that no adaptive routine is used for parametric and polar graphs,
 so 
\family typewriter
nticks
\family default
 often must be set higher for plots of these types.
\end_layout

\begin_layout Description
point_size Possible values are non-negative integers.
 Default value is 
\series bold
\shape italic
1
\series default
\shape default
.
 Affects all points except those with 
\family typewriter
point_type
\family default
 dot.
\end_layout

\begin_layout Description
point_type Possible values are listed in the table below.
 Default value is 
\series bold
\shape italic
1
\series default
\shape default
 (
\series bold
\shape italic
plus
\series default
\shape default
).
 Determines the type of points to plot.
 May be specified using either the numeric value or the name.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="16" columns="3">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="1.1in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Numeric value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Appearance
\end_layout

\begin_layout Plain Layout
(Approximately)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
none
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
dot
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\cdot$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
plus
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $+$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
multiply
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\times$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
asterisk
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\ast$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
square
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boxdot$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
filled_square
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\blacksquare$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
circle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\odot$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
filled_circle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\CIRCLE$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
up_triangle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\triangle$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
filled_up_triangle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\blacktriangle$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
down_triangle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\triangledown$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
filled_down_triangle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset Formula $\blacktriangledown$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
diamant
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\diamondsuit$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
filled_diamant
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\blacklozenge$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Description
points_joined Possible values are 
\shape italic
true
\shape default
 and 
\series bold
\shape italic
false
\series default
\shape default
.
 When true, points will be connected with line segments.
\end_layout

\begin_layout Subsection
3D graphs
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!3D
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is recommended that you read 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:2D-graphs"

\end_inset

 before continuing.
 Much of what is discussed there applies here.
 3D graphs are created using the 
\family typewriter
draw3d()
\family default
 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{draw3d()}
\end_layout

\end_inset


\end_layout

\end_inset

command whose syntax is very similar to that of the 
\family typewriter
draw2d()
\family default
 command but with necessary modifications involving the independent variables.
 For example, instead of graphing an explicit function with a call like
 
\family typewriter
draw2d(explicit(sin(x),x,-5,5))
\family default
, you use a call like 
\family typewriter
draw3d(explicit(sin(x*y),x,-2,2,y,-2,2))
\family default
.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{explicit}
\end_layout

\end_inset


\end_layout

\end_inset

 3D extensions exist for the constructs explicit, implicit, parametric,
 and points.
 Additionally, the common 3D analogs of polar, namely cylindrical and spherical
 coordinates, are available.
 Finally, Maxima also offers a facility for creating contour plots and parametri
c surfaces.
\end_layout

\begin_layout Standard
There are many options available for controlling a graph's appearance, some
 of which will be discussed as they are used in the examples.
 Be aware that the options discussed in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:PlotOptions"

\end_inset

-
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Local-options"

\end_inset

 also apply to 3D graphs, so they will be used but not re-explained here.
 Only new options will be explained as they are encountered.
\end_layout

\begin_layout Subsubsection
Functions and relations
\end_layout

\begin_layout Standard
As with 2D graphs, Maxima has the facility to draw 3D explicit, implicit,
 and parametric graphs.
 In fact, the constructs and syntax are nearly identical.
 The only modification needed for these constructs is the addition of the
 third variable.
 Refer to the corresponding section on 2D graphs for more information.
 In the following examples, the 
\family typewriter
(%i#)
\family default
 will be suppressed as there is no chance for confusion between input (the
 Maxima code) and output (the graphs).
\end_layout

\begin_layout Description
Explicit 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{explicit}
\end_layout

\end_inset


\end_layout

\end_inset

Graph the function 
\begin_inset Formula $f(x,y)=sin(xy)$
\end_inset

 over the rectangle 
\begin_inset Formula $[-2,2]\times[-2,2]$
\end_inset

.
 The 
\family typewriter
surface_hide
\family default
 option tells Maxima not to show hidden surfaces.
 When 
\family typewriter
surface_hide
\family default
 is true, each surface will be treated as if it were opaque.
 When surface_hide is false, the surface will be shown as a wire frame only.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
load(draw)$
\end_layout

\begin_layout LyX-Code
  draw3d(
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{draw3d()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
      surface_hide=true,
\end_layout

\begin_layout LyX-Code
      color=blue,
\end_layout

\begin_layout LyX-Code
      explicit(sin(x*y),x,-2,2,y,-2,2),
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{explicit}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
  );
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename 3Dexplicit.eps
	lyxscale 50
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Description
Implicit 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{implicit}
\end_layout

\end_inset


\end_layout

\end_inset

Graph the solutions of 
\begin_inset Formula $x^{2}-sin(y)=z^{2}$
\end_inset

 in the cube 
\begin_inset Formula $[-2,2]\times[-2,2]\times[-2,2]$
\end_inset

.
 When enhanced3d is true, Maxima will plot the surface in color and display
 a colorbox indicating what values the colors represent.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
load(draw)$
\end_layout

\begin_layout LyX-Code
draw3d(
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{draw3d()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
    enhanced3d=true,
\end_layout

\begin_layout LyX-Code
    implicit(x^2-sin(y)=z^2,
\end_layout

\begin_layout LyX-Code
             x,-2,2,y,-2,2,z,-2,2)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{implicit}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename 3Dimplicit.eps
	lyxscale 50
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Description
Parametric 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{parametric}
\end_layout

\end_inset


\end_layout

\end_inset

Graph the spring defined by the parametric equations 
\begin_inset Formula $x=\cos(t)$
\end_inset

, 
\begin_inset Formula $y=\sin(t)$
\end_inset

, 
\begin_inset Formula $z=t$
\end_inset

, 
\begin_inset Formula $t\in[0,30]$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
load(draw)$
\end_layout

\begin_layout LyX-Code
draw3d(
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{draw3d()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
    nticks=200,
\end_layout

\begin_layout LyX-Code
    line_width=2,
\end_layout

\begin_layout LyX-Code
    color=salmon,
\end_layout

\begin_layout LyX-Code
    parametric(cos(t),sin(t),t,t,0,30)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{parametric}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename 3Dparametric.eps
	lyxscale 50
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Maxima also has the capability of drawing parametric surfaces plus functions
 defined in cylindrical and spherical coordinates.
\end_layout

\begin_layout Description
Parametric
\begin_inset space ~
\end_inset

surface 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{parametric surface}
\end_layout

\end_inset


\end_layout

\end_inset

Parametric surfaces are defined by supplying the 
\family typewriter
parametric_surface
\family default
 construct with the 3 coordinate functions (of 2 variables) plus the ranges
 for the two independent variables.
 The syntax for graphing a parametric surface is
\end_layout

\begin_layout Standard
\align center

\family typewriter
parametric_surface(x(u,v),y(u,v),z(u,v),u,umin,umax,v,vmin,vmax)
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{parametric surface}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
load(
\begin_inset Quotes eld
\end_inset

draw
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
draw3d(
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{draw3d()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
    title="Mobius strip",
\end_layout

\begin_layout LyX-Code
    color="dark-pink",
\end_layout

\begin_layout LyX-Code
    surface_hide=true,
\end_layout

\begin_layout LyX-Code
    rot_vertical=54,
\end_layout

\begin_layout LyX-Code
    rot_horizontal=40,
\end_layout

\begin_layout LyX-Code
    parametric_surface(
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{parametric surface}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
        cos(x)*(3+y*cos(x/2)),
\end_layout

\begin_layout LyX-Code
        sin(x)*(3+y*cos(x/2)),
\end_layout

\begin_layout LyX-Code
        y*sin(x/2),
\end_layout

\begin_layout LyX-Code
        x,-%pi,%pi,y,-1,1
\end_layout

\begin_layout LyX-Code
    )
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename 3DparametricSurface.eps
	lyxscale 50
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family roman
A second example
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
load(
\begin_inset Quotes eld
\end_inset

draw
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
draw3d(
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{draw3d()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
    enhanced3d=true,
\end_layout

\begin_layout LyX-Code
    xu_grid=100,
\end_layout

\begin_layout LyX-Code
    yv_grid=25,
\end_layout

\begin_layout LyX-Code
    parametric_surface(
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{parametric surface}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
        0.5*u*cos(u)*(cos(v)+1),
\end_layout

\begin_layout LyX-Code
        0.5*u*sin(u)*(cos(v)+1),
\end_layout

\begin_layout LyX-Code
        u*sin(v)-((u+3)/8*%pi)^2-20,
\end_layout

\begin_layout LyX-Code
        u,0,6*%pi,v,-%pi,%pi
\end_layout

\begin_layout LyX-Code
    ),
\end_layout

\begin_layout LyX-Code
    rot_horizontal=126,
\end_layout

\begin_layout LyX-Code
    rot_vertical=67
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename 3DparametricSurface2.eps
	lyxscale 50
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Description
Cylindrical 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
cylindrical coordinates
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{cylindrical}
\end_layout

\end_inset


\end_layout

\end_inset

Functions in cylindrical coordinates are defined by supplying the 
\family typewriter
cylindrical
\family default
 construct with an explicit expression for radius as a function of the azimuth,
 
\begin_inset Formula $\theta$
\end_inset

, and 
\begin_inset Formula $z$
\end_inset

-coordinate.
 
\begin_inset Formula $\theta$
\end_inset

 is the angle within the 
\begin_inset Formula $x$
\end_inset

-
\begin_inset Formula $y$
\end_inset

 plane measured counterclockwise from the positive 
\begin_inset Formula $x$
\end_inset

-axis, as in polar coordinates.
 
\begin_inset Formula $\theta$
\end_inset

 is often in the range from 0 to 
\begin_inset Formula $2\pi$
\end_inset

.
 The syntax for graphing a cylindrical function is
\end_layout

\begin_layout Standard
\align center

\family typewriter
cylindrical(r(z,t),z,zmin,zmax,t,tmin,tmax)
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{cylindrical}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
draw3d(
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{draw3d()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
    cylindrical(5+cos(3*th+z),
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{cylindrical}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
            z,0,12,th,0,2*%pi),
\end_layout

\begin_layout LyX-Code
    axis_3d=false,
\end_layout

\begin_layout LyX-Code
    xtics=false,
\end_layout

\begin_layout LyX-Code
    ytics=false,
\end_layout

\begin_layout LyX-Code
    ztics=false,
\end_layout

\begin_layout LyX-Code
    rot_horizontal=44,
\end_layout

\begin_layout LyX-Code
    rot_vertical=76,
\end_layout

\begin_layout LyX-Code
    enhanced3d=true,
\end_layout

\begin_layout LyX-Code
    colorbox=false
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename 3Dcylindrical.eps
	lyxscale 50
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Description
Spherical 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
spherical coordinates
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{spherical}
\end_layout

\end_inset


\end_layout

\end_inset

Functions in spherical coordinates are defined by supplying the 
\family typewriter
spherical
\family default
 construct with an explicit expression for magnitude as a function of the
 azimuth, 
\begin_inset Formula $\theta$
\end_inset

, and zenith, 
\begin_inset Formula $\phi$
\end_inset

.
 
\begin_inset Formula $\theta$
\end_inset

 is the angle within the 
\begin_inset Formula $x$
\end_inset

-
\begin_inset Formula $y$
\end_inset

 plane measured counterclockwise from the positive 
\begin_inset Formula $x$
\end_inset

-axis, often in the range from 0 to 
\begin_inset Formula $2\pi$
\end_inset

.
 
\begin_inset Formula $\phi$
\end_inset

 is the angle measured from the positive 
\begin_inset Formula $z$
\end_inset

-axis, often in the range from 0 to 
\begin_inset Formula $\pi$
\end_inset

.
 The syntax for graphing a spherical function is
\end_layout

\begin_layout Standard
\align center

\family typewriter
spherical(M(t,p),t,tmin,tmax,p,pmin,pmax)
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{spherical}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
draw3d(
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{draw3d()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
    spherical(5+cos(3*th)*sin(4*ph),
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{spherical}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
            th,0,2*%pi,ph,0,%pi),
\end_layout

\begin_layout LyX-Code
    axis_3d=false,
\end_layout

\begin_layout LyX-Code
    xtics=false,
\end_layout

\begin_layout LyX-Code
    ytics=false,
\end_layout

\begin_layout LyX-Code
    ztics=false,
\end_layout

\begin_layout LyX-Code
    rot_horizontal=50,
\end_layout

\begin_layout LyX-Code
    rot_vertical=56
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename 3Dspherical.eps
	lyxscale 50
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Discrete data
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!discrete data
\end_layout

\end_inset


\end_layout

\begin_layout Standard
See 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Discrete-data"

\end_inset

 for a discussion of how to plot discrete data.
 The differences for plotting points in 3D are that you must
\end_layout

\begin_layout Itemize
use 
\family typewriter
draw3d()
\family default
 instead of 
\family typewriter
draw2d()
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{draw3d()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
give 3 coordinates for each point instead of 2
\end_layout

\begin_layout Standard
For example, the following code will plot the data set
\begin_inset Formula 
\[
\{(1,5,2),(2,4,4),(6,2,3),(3,7,1),(4,4,6),(2,3,9),(5,5,4)\}.
\]

\end_inset

Of course point and line options such as 
\family typewriter
point_size
\family default
, 
\family typewriter
line_width
\family default
, and 
\family typewriter
point_type
\family default
 all apply to 3D plots exactly as they do to 2D plots.
\end_layout

\begin_layout LyX-Code
(%i31) load(
\begin_inset Quotes eld
\end_inset

draw
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
       xx:[1,2,6,3,4,2,5]$
\end_layout

\begin_layout LyX-Code
       yy:[5,4,2,7,4,3,5]$
\end_layout

\begin_layout LyX-Code
       zz:[2,4,3,1,6,9,4]$
\end_layout

\begin_layout LyX-Code
       draw3d(points(xx,yy,zz));
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{points}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{draw3d()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Contour plots
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!contour plots
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A contour plot is just an explicit plot with appropriate options set.
 So to create a contour plot, do exactly as you would if you were planning
 to plot a 3D explicit function; then add the information about how you
 want the contours to look using the 
\family typewriter
contour
\family default
 option and, optionally, the 
\family typewriter
contour_levels
\family default
 option.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
load(
\begin_inset Quotes eld
\end_inset

draw
\begin_inset Quotes erd
\end_inset

)$
\end_layout

\begin_layout LyX-Code
draw3d(
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{draw3d()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
    user_preamble="set pm3d at s;unset key",
\end_layout

\begin_layout LyX-Code
    xu_grid=120,
\end_layout

\begin_layout LyX-Code
    yv_grid=60,
\end_layout

\begin_layout LyX-Code
    explicit(sin(x*y),x,-3,3,y,-9/4,9/4),
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{explicit}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
    contour=map,
\end_layout

\begin_layout LyX-Code
    contour_levels={-.9,-0.6,-0.3,0,.3,.6,.9}
\end_layout

\begin_layout LyX-Code
 );
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename 3Dcontour.eps
	lyxscale 50
	scale 65

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The 
\family typewriter
user_preamble 
\begin_inset Quotes eld
\end_inset

set pm3d at s;unset key
\begin_inset Quotes erd
\end_inset


\family default
 does two things.
 It tells Maxima to add color and a color scale to the contour plot, and
 to turn off the contour line key that normally accompanies a contour plot.
 The same code will work perfectly well without the 
\family typewriter
user_preamble
\family default
, but no coloring will be done.
\end_layout

\begin_layout Subsubsection
Options with 2D counterparts
\end_layout

\begin_layout Standard
Each of these options works just like its 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 counterparts.
 So for information on 
\family typewriter
logz
\family default
, see 
\family typewriter
logx
\family default
 (
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
S
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Global-options"

\end_inset

) and for information on 
\family typewriter
zaxis
\family default
, see 
\family typewriter
xaxis
\family default
, and so on.
\end_layout

\begin_layout Standard
\align center

\family typewriter
logz, zaxis, zaxis_color, zaxis_type, zaxis_width, zlabel, zrange, ztics
\end_layout

\begin_layout Subsubsection
Options with no 2D counterparts
\end_layout

\begin_layout Standard
All of the following options except for 
\family typewriter
xu_grid
\family default
 and 
\family typewriter
yv_grid
\family default
 are global options.
\end_layout

\begin_layout Description
axis_3d Possible values are 
\series bold
\shape italic
true
\series default
\shape default
 and 
\shape italic
false
\shape default
.
 Determines whether to draw a bounding box for a 3D graph.
\end_layout

\begin_layout Description
colorbox Possible values are 
\series bold
\shape italic
true
\series default
\shape default
 and 
\shape italic
false
\shape default
.
 Determines whether to draw a color scale for colored 3D graphs.
 If 
\family typewriter
enhanced3d
\family default
 is false, this setting has no effect.
\end_layout

\begin_layout Description
contour Possible values are 
\series bold
\shape italic
none
\series default
\shape default
, 
\shape italic
base
\shape default
, 
\shape italic
surface
\shape default
, 
\shape italic
both
\shape default
, and 
\shape italic
map
\shape default
.
 The effects of these options are as follows.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
none
\family default
: no contour lines are plotted.
\end_layout

\begin_layout Itemize

\family typewriter
base
\family default
: contour lines are added to the 
\begin_inset Formula $x$
\end_inset

-
\begin_inset Formula $y$
\end_inset

 plane.
\end_layout

\begin_layout Itemize

\family typewriter
surface
\family default
: contour lines are added on the surface.
\end_layout

\begin_layout Itemize

\family typewriter
both
\family default
: contour lines are added to the 
\begin_inset Formula $x$
\end_inset

-
\begin_inset Formula $y$
\end_inset

 plane and on the surface.
\end_layout

\begin_layout Itemize

\family typewriter
map
\family default
: contour lines are drawn in 2D.
 No surface is shown.
\end_layout

\end_deeper
\begin_layout Description
contour_levels Possible values are positive integers, a list of three numbers,
 or a set of numbers.
 Default value is 
\series bold
\shape italic
5
\series default
\shape default
.
 The effects of the three types of values are as follows.
\end_layout

\begin_deeper
\begin_layout Itemize
positive integer: Sets the number of contour lines to be drawn.
 They will be drawn at equal intervals within the range.
\end_layout

\begin_layout Itemize
list of three numbers, 
\family typewriter
[low, step, high]
\family default
: Sets contour lines to be plotted from 
\family typewriter
low
\family default
 to 
\family typewriter
high
\family default
 in increments of 
\family typewriter
step
\family default
.
\end_layout

\begin_layout Itemize
set of numbers, 
\begin_inset Formula $\{v_{1},v_{2},\ldots\}$
\end_inset

: Contour lines will be plotted at the values, 
\begin_inset Formula $v_{1}$
\end_inset

, 
\begin_inset Formula $v_{2}$
\end_inset

, and so on, specified in the set.
\end_layout

\end_deeper
\begin_layout Description
enhanced3d Possible values are 
\shape italic
true
\shape default
 and 
\series bold
\shape italic
false
\series default
\shape default
.
 Determines whether to draw 3D surfaces in color.
\end_layout

\begin_layout Description
rot_horizontal Possible values are numbers from 0 to 360.
 The default value is 
\series bold
\shape italic
30
\series default
\shape default
.
 Sets the angle of rotation about the 
\begin_inset Formula $z$
\end_inset

-axis for 3D scenes.
\end_layout

\begin_layout Description
rot_vertical Possible values are numbers from 0 to 180.
 The default value is 
\series bold
\shape italic
60
\series default
\shape default
.
 Sets the angle of rotation about the 
\begin_inset Formula $x$
\end_inset

-axis for 3D scenes.
\end_layout

\begin_layout Description
surface_hide Possible values are 
\shape italic
true
\shape default
 and 
\series bold
\shape italic
false
\series default
\shape default
.
 Determines whether to draw hidden parts of 3D surfaces.
\end_layout

\begin_layout Description
xu_grid Possible values are positive integers.
 Default value is 30.
 Sets the number of values of the first coordinate to use in building the
 grid of sample points.
 The less even a surface is, the higher this number will have to be in order
 to capture the details of the surface.
\end_layout

\begin_layout Description
yv_grid Possible values are positive integers.
 Default value is 30.
 Sets the number of values of the second coordinate to use in building the
 grid of sample points.
 The less even a surface is, the higher this number will have to be in order
 to capture the details of the surface.
\end_layout

\begin_layout Section
Programming
\end_layout

\begin_layout Standard
Iterative methods such as Newton's Method, Euler's Method, and Simpson's
 Rule are often part of the common Calculus sequence.
 Sometimes they are simply demonstrated and sometimes students are asked
 to implement the algorithms in some type of programming language or another.
 All of them can easily be programmed and executed using Maxima.
 The main ingredient not yet covered in this manual is the loop.
 In Maxima, there is only one looping structure: the 
\family typewriter
do()
\family default
 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{do()}
\end_layout

\end_inset


\end_layout

\end_inset

command.
 In its simplest form, it is used with no prefix.
 In this case, its arguments are to be interpreted as a list of commands
 to be executed repeatedly (looped) ad infinitum.
 Of course, to be practical, such a loop must have an exit procedure.
 This is supplied by the 
\family typewriter
return()
\family default
 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{return()}
\end_layout

\end_inset


\end_layout

\end_inset

command.
 When a 
\family typewriter
return()
\family default
 is reached, the 
\family typewriter
do()
\family default
 loop is exited and the argument of the 
\family typewriter
return()
\family default
 command becomes the loop's return value.
 So, an 
\begin_inset Quotes eld
\end_inset

infinite
\begin_inset Quotes erd
\end_inset

 
\family typewriter
do()
\family default
 loop will typically have the form
\end_layout

\begin_layout LyX-Code
do(
\end_layout

\begin_layout LyX-Code
    command1(),
\end_layout

\begin_layout LyX-Code
    command2(),
\end_layout

\begin_layout LyX-Code
        
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\begin_layout LyX-Code
    commandN(),
\end_layout

\begin_layout LyX-Code
    if conditionMet then return(value)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{return()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
)
\end_layout

\begin_layout Standard

\family typewriter
do()
\family default
 loops may also be prefixed with conditions on how many times to excute
 the loop and for what values of the looping variable.
 If you are comfortable with 
\begin_inset Quotes eld
\end_inset

for
\begin_inset Quotes erd
\end_inset

 loops
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
for loop
\end_layout

\end_inset

 from other programming languages, this will look very familiar.
 The possible forms for such loops are
\end_layout

\begin_layout Itemize

\family typewriter
for
\family default
 
\shape italic
variable
\shape default
: 
\shape italic
startvalue
\shape default
 
\family typewriter
thru
\family default
 
\shape italic
endvalue
\shape default
 
\family typewriter
step
\family default
 
\shape italic
increment
\shape default
 
\family typewriter
do(
\family default
\shape italic
commands
\family typewriter
\shape default
)
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{do()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
for
\family default
 
\shape italic
variable
\shape default
: 
\shape italic
startvalue
\shape default
 
\family typewriter
while
\family default
 
\shape italic
condition
\shape default
 
\family typewriter
step
\family default
 
\shape italic
increment
\shape default
 
\family typewriter
do(
\family default
\shape italic
commands
\family typewriter
\shape default
)
\end_layout

\begin_layout Itemize

\family typewriter
for
\family default
 
\shape italic
variable
\shape default
: 
\shape italic
startvalue
\shape default
 
\family typewriter
unless
\family default
 
\shape italic
condition
\shape default
 
\family typewriter
step
\family default
 
\shape italic
increment
\shape default
 
\family typewriter
do(
\family default
\shape italic
commands
\family typewriter
\shape default
)
\end_layout

\begin_layout Standard
The only difference between the three forms is the exit condition.
 The first will exit after the loop has executed for the 
\shape italic
endvalue
\shape default
.
 The second will only exit when the 
\family typewriter
while
\family default
 condition fails to be met.
 The third will exit when the 
\family typewriter
unless
\family default
 condition is met.
 So, these three 
\family typewriter
do()
\family default
 loops are equivalent:
\end_layout

\begin_layout Itemize

\family typewriter
for i:1 thru 10 step 1 do(
\family default
\shape italic
commands
\family typewriter
\shape default
)
\end_layout

\begin_layout Itemize

\family typewriter
for i:1 while i<11 step 1 do(
\family default
\shape italic
commands
\family typewriter
\shape default
)
\end_layout

\begin_layout Itemize

\family typewriter
for i:1 unless i>10 step 1 do(
\family default
\shape italic
commands
\family typewriter
\shape default
)
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{do()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In fact, when 
\shape italic
increment
\shape default
 is 1, you can omit the 
\family typewriter
step
\family default
 as in 
\end_layout

\begin_layout Standard
\align center

\family typewriter
for i:1 while i<11 do(
\family default
\shape italic
commands
\family typewriter
\shape default
)
\end_layout

\begin_layout Subsection
Example (Newton's Method)
\end_layout

\begin_layout Standard
Let's look at Newton's Method with the intent of creating a reusable (functional
) implementation.
 As a quick review, if you have a function 
\begin_inset Formula $f(x)$
\end_inset

 and an initial approximation 
\begin_inset Formula $x_{0}$
\end_inset

, then Newton's Method is to compute iteratively 
\begin_inset Formula $x_{1},x_{2},x_{3},\ldots,x_{n}$
\end_inset

 according to the formula 
\begin_inset Formula 
\[
x_{i+1}=x_{i}-\frac{f(x_{i})}{f'(x_{i})}.
\]

\end_inset

The number of iterations must be monitored in some way since Newton's Method
 is not guaranteed to converge in general.
 So, the function that we build must at a minimum apply the above formula
 iteratively and count the number of iterations.
 It is customary to include the ability to stop iterating when 
\begin_inset Formula $|f(x_{i})|$
\end_inset

 is less than some tolerance, 
\begin_inset Formula $\epsilon$
\end_inset

.
 So, a good implementation will have this ability as well.
 Here is one such implementation.
\end_layout

\begin_layout LyX-Code
newton(f,x0,tol,maxits):=([t,df,c],
\end_layout

\begin_layout LyX-Code
    df:diff(f(t),t),
\end_layout

\begin_layout LyX-Code
    c:0,
\end_layout

\begin_layout LyX-Code
    do(
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{do()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
        x0:x0-f(x0)/ev(df,t=x0),
\end_layout

\begin_layout LyX-Code
        if abs(f(x0))<tol then return (x0),
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{if...then...}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
        c:c+1,
\end_layout

\begin_layout LyX-Code
        if c=maxits then return ("maximum iterations reached")
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{return()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
    )
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
The inputs to the function are 
\family typewriter
f
\family default
 (the function whose zeroes are desired), 
\family typewriter
x0
\family default
 (the initial approximation), 
\family typewriter
tol
\family default
 (the tolerance), and 
\family typewriter
maxits
\family default
 (the maximum number of iterations to attempt).
 The variables 
\family typewriter
t
\family default
, 
\family typewriter
df
\family default
, and 
\family typewriter
c
\family default
 are declared to be local to this function by enclosing them in square brackets
 immediately following the open parenthesis for the function.
 Each line of the function except the last is terminated with a comma instead
 of the usual semicolon or dollar sign.
 This is how to include more than one command in a function.
 Similarly the 
\family typewriter
do()
\family default
 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{do()}
\end_layout

\end_inset


\end_layout

\end_inset

command consists of multiple lines, each except the last terminated by a
 comma.
 This form of the 
\family typewriter
do()
\family default
 command will simply loop until a 
\family typewriter
return()
\family default
 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{return()}
\end_layout

\end_inset


\end_layout

\end_inset

command is encountered.
 Notice there are two conditions under which the 
\family typewriter
do()
\family default
 command will exit: if 
\family typewriter
abs(f(x0))<tol
\family default
 or if 
\family typewriter
c=maxits
\family default
.
 In other words, if 
\begin_inset Formula $|f(x_{i})|<\epsilon$
\end_inset

 or the number of iterations has reached its maximum.
 In case of the first condition, the value of the current iteration is returned.
 In case of the second condition, a message stating that the maximum number
 of iterations was reached is returned instead, indicating failure to achieve
 the desired accuracy.
 Notice the straightforward use of the 
\family typewriter
if ...
 then ...

\family default
 construct.
 To call the function, you need four arguments.
 For example, finding a zero of 
\begin_inset Formula $f(x)=x-\cos(x)$
\end_inset

 to within 
\begin_inset Formula $5(10)^{-10}$
\end_inset

 accuracy using an initial approximation of 
\begin_inset Formula $300$
\end_inset

 could be done as follows.
\end_layout

\begin_layout LyX-Code
(%i115) f(x):=x-cos(x);
\end_layout

\begin_layout LyX-Code
        newton(f,300.0,5e-10,50);
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
(%o115) f(x):=x-cos(x)
\end_layout

\begin_layout LyX-Code
(%o116) .7390851332151606
\end_layout

\begin_layout Standard
Of course the implementation could be modified to include a 
\family typewriter
print()
\family default
 statement within the 
\family typewriter
do()
\family default
 loop to report each iteration if such information were desirable.
 And to make calling the function simpler, a tolerance and maximum number
 of iterations could be hard-coded into the function, thus reducing the
 number of arguments.
\end_layout

\begin_layout Subsection
Example (Euler's Method)
\end_layout

\begin_layout Standard
Euler's Method is a first-order numerical method for solving differential
 equations based on the simple assumption that
\begin_inset Formula 
\[
y(t+h)\approx y(t)+h\cdot y'(t,y(t)).
\]

\end_inset

Let's construct an implementation designed to execute Euler's Method and
 display the results graphically.
 We will assume a differential equation of the form
\begin_inset Formula 
\[
y'=f(t,y).
\]

\end_inset

The method will proceed from an initial condition 
\begin_inset Formula $y(t_{0})=y_{0}$
\end_inset

, calculating 
\begin_inset Formula $y_{i+1}=y_{i}+h\cdot f(t_{i},y_{i})$
\end_inset

 and 
\begin_inset Formula $t_{i+1}=t_{i}+h$
\end_inset

 for 
\begin_inset Formula $i=0,1,2,\ldots,n-1$
\end_inset

.
 This time, we will forego writing a multiline function definition in favor
 of a code whose first several lines should be modified but last several
 should not.
 The first several lines will contain the information about the differential
 equation and its initial conditions.
 The last several lines will contain the implementation of the algorithm
 and the code to display the results.
 Here is one way to do so.
\end_layout

\begin_layout LyX-Code
load(draw)$
\end_layout

\begin_layout LyX-Code
/* Set up DE and parameters */
\end_layout

\begin_layout LyX-Code
/* Modify these values to demo */
\end_layout

\begin_layout LyX-Code
/* solution of other DEs */
\end_layout

\begin_layout LyX-Code
f(t,y):=t+y$
\end_layout

\begin_layout LyX-Code
tt:[0.0]$
\end_layout

\begin_layout LyX-Code
yy:[1.0]$
\end_layout

\begin_layout LyX-Code
h:0.2$
\end_layout

\begin_layout LyX-Code
n:10$
\end_layout

\begin_layout LyX-Code
yactual(t):=-1-t+2*exp(t)$
\end_layout

\begin_layout LyX-Code
yr:[0,12]$ /* yrange fro the graph */
\end_layout

\begin_layout LyX-Code
/* Execute the method */
\end_layout

\begin_layout LyX-Code
/* Do not modify any lines */
\end_layout

\begin_layout LyX-Code
/* below this one */
\end_layout

\begin_layout LyX-Code
for j:1 thru n do(
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{do()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
    yy:append(yy,[yy[j]+h*f(tt[j],yy[j])]),
\end_layout

\begin_layout LyX-Code
    tt:append(tt,[tt[j]+h])
\end_layout

\begin_layout LyX-Code
)$
\end_layout

\begin_layout LyX-Code
/* Plot results */
\end_layout

\begin_layout LyX-Code
draw2d(
\end_layout

\begin_layout LyX-Code
    key="exact solution",
\end_layout

\begin_layout LyX-Code
    explicit(yactual(x),x,t[0],t[0]+h*n),
\end_layout

\begin_layout LyX-Code
    key="approximate solution",
\end_layout

\begin_layout LyX-Code
    points_joined=true,
\end_layout

\begin_layout LyX-Code
    color=red,
\end_layout

\begin_layout LyX-Code
    point_type=circle,
\end_layout

\begin_layout LyX-Code
    point_size=2,
\end_layout

\begin_layout LyX-Code
    points(tt,yy),
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
graphing!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{points}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
    title="Euler Method Demonstration",
\end_layout

\begin_layout LyX-Code
    yrange=yr
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename EulersMethod.eps
	lyxscale 50
	scale 65

\end_inset


\end_layout

\begin_layout Standard
\noindent
Notice that the program is 31 lines long, but the heart of Euler's Method
 only accounts for 4 of them! The rest of the lines are a matter of convenience
 and readability.
 All text delimited by 
\family typewriter
/*
\family default
 and 
\family typewriter
*/
\family default
 is treated as a comment.
 These parts of the code do nothing but instruct the reader.
 The 
\family typewriter
do()
\family default
 command in this form executes once for each integer from 1 through 
\family typewriter
n
\family default
.
\end_layout

\begin_layout Subsection
Example (Simpson's Rule)
\end_layout

\begin_layout Standard
Our implementation of Simpson's Rule will be a hybrid of the implementations
 of Newton's Method and Euler's Method.
 We will produce a no-frills multiline Simpson's Rule function and wrap
 it with both utilitarian and illustrative code.
 Starting with Simpson's Rule, we will use the 
\family typewriter
do()
\family default
 command with the 
\family typewriter
step
\family default
 option.
\end_layout

\begin_layout LyX-Code
simpsons(f,x1,x2,n):=([j,h,total],
\end_layout

\begin_layout LyX-Code
    total:0.0,
\end_layout

\begin_layout LyX-Code
    h:ev((x2-x1)/(2*n),numer),
\end_layout

\begin_layout LyX-Code
    for j:0 thru 2*(n-1) step 2 do(
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{do()}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
        total:total + f(x1+j*h) + 4.0*f(x1+(j+1)*h) + f(x1+(j+2)*h)
\end_layout

\begin_layout LyX-Code
    ),
\end_layout

\begin_layout LyX-Code
    h*total/3.0
\end_layout

\begin_layout LyX-Code
)$
\end_layout

\begin_layout Standard
There are more efficient ways to program this computation, but this one
 favors simplicity.
 It may make a nice exercise to rewrite this function to do the computation
 in a more efficient manner.
 In any case, note that the function requires 4 arguments: the function
 to integrate (
\family typewriter
f
\family default
), the limits of integration (
\family typewriter
x1
\family default
 to 
\family typewriter
x2
\family default
), and the number of intervals to use in Simpson's Rule (
\family typewriter
n
\family default
).
 Since this function has no bells or whistles, it can be used in both a
 utilitarian fashion as in
\end_layout

\begin_layout LyX-Code
(%i69) f(x):=sin(x)*exp(x)+1$
\end_layout

\begin_layout LyX-Code
       simpsons(f,0,%pi,10);
\end_layout

\begin_layout LyX-Code
(%o70) 15.21177471542183
\end_layout

\begin_layout Standard
and in a more frilly fashion as in
\end_layout

\begin_layout LyX-Code
(%i80) f(x):=sin(x)*exp(x)+1$
\end_layout

\begin_layout LyX-Code
       x1:0$
\end_layout

\begin_layout LyX-Code
       x2:%pi$
\end_layout

\begin_layout LyX-Code
       n:10$
\end_layout

\begin_layout LyX-Code
       exact:'integrate(f(x),x,x1,x2)$
\end_layout

\begin_layout LyX-Code
       print(exact)$
\end_layout

\begin_layout LyX-Code
       print("is approximately ",simpsons(f,x1,x2,n))$
\end_layout

\begin_layout LyX-Code
       print("and is exactly ",ev(exact,nouns))$
\end_layout

\begin_layout LyX-Code
       print("which is about ",ev(%,numer))$
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
 %pi
\end_layout

\begin_layout LyX-Code
/
\end_layout

\begin_layout LyX-Code
[       x
\end_layout

\begin_layout LyX-Code
I    (%e  sin(x) + 1) dx 
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout LyX-Code
/
\end_layout

\begin_layout LyX-Code
 0
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
is approximately  15.21177471542183
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
                           %pi
\end_layout

\begin_layout LyX-Code
                2 %pi + %e    + 1
\end_layout

\begin_layout LyX-Code
and is exactly  -----------------
\end_layout

\begin_layout LyX-Code
                         2
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout LyX-Code
which is about  15.21193896997943 
\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"

\end_inset

 
\end_layout

\end_body
\end_document
